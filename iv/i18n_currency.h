// This file is auto-generated header by tools/generate-currency.py.
// So do not edit this file.
#ifndef IV_I18N_CURRENCY_H_
#define IV_I18N_CURRENCY_H_
#include <iv/detail/array.h>
#include <iv/detail/unordered_map.h>
namespace iv {
namespace core {
namespace i18n {

struct CurrencyData {
  static const int kMaxCurrencyCodeSize = 30;
  const char* name;
  struct CurrencyCode {
    std::size_t size;
    uint16_t data[kMaxCurrencyCodeSize];
  } code;
};

typedef std::array<CurrencyData, 107> CurrencyDataArray;
static const CurrencyDataArray kCurrencyData = { {
  { "AFN", { 2U, { 0x41, 0x66 } } },  // NOLINT
  { "ALL", { 3U, { 0x6c, 0x65, 0x6b } } },  // NOLINT
  { "AMD", { 4U, { 0x64, 0x72, 0x61, 0x6d } } },  // NOLINT
  { "ANG", { 5U, { 0x4e, 0x41, 0x20, 0x66, 0x2e } } },  // NOLINT
  { "ARS", { 4U, { 0x41, 0x72, 0x67, 0x24 } } },  // NOLINT
  { "AUD", { 2U, { 0x24, 0x41 } } },  // NOLINT
  { "BAM", { 2U, { 0x4b, 0x4d } } },  // NOLINT
  { "BBD", { 4U, { 0x42, 0x44, 0x53, 0x24 } } },  // NOLINT
  { "BDT", { 2U, { 0x54, 0x6b } } },  // NOLINT
  { "BEF", { 2U, { 0x42, 0x46 } } },  // NOLINT
  { "BGL", { 3U, { 0x6c, 0x65, 0x76 } } },  // NOLINT
  { "BHD", { 2U, { 0x42, 0x44 } } },  // NOLINT
  { "BIF", { 3U, { 0x46, 0x62, 0x75 } } },  // NOLINT
  { "BMD", { 4U, { 0x42, 0x65, 0x72, 0x24 } } },  // NOLINT
  { "BOB", { 2U, { 0x42, 0x73 } } },  // NOLINT
  { "BTN", { 2U, { 0x4e, 0x75 } } },  // NOLINT
  { "BYR", { 3U, { 0x52, 0x62, 0x6c } } },  // NOLINT
  { "BZD", { 3U, { 0x42, 0x5a, 0x24 } } },  // NOLINT
  { "CAD", { 4U, { 0x43, 0x61, 0x6e, 0x24 } } },  // NOLINT
  { "CHF", { 3U, { 0x53, 0x77, 0x46 } } },  // NOLINT
  { "CLP", { 3U, { 0x43, 0x68, 0x24 } } },  // NOLINT
  { "CNY", { 1U, { 0x59 } } },  // NOLINT
  { "COP", { 4U, { 0x43, 0x6f, 0x6c, 0x24 } } },  // NOLINT
  { "CRC", { 1U, { 0x43 } } },  // NOLINT
  { "CVE", { 5U, { 0x43, 0x56, 0x45, 0x73, 0x63 } } },  // NOLINT
  { "CYP", { 2U, { 0xa3, 0x43 } } },  // NOLINT
  { "DJF", { 2U, { 0x44, 0x46 } } },  // NOLINT
  { "DKK", { 3U, { 0x44, 0x4b, 0x72 } } },  // NOLINT
  { "DOP", { 3U, { 0x52, 0x44, 0x24 } } },  // NOLINT
  { "DZD", { 2U, { 0x44, 0x41 } } },  // NOLINT
  { "ESP", { 1U, { 0x20a7 } } },  // NOLINT
  { "ETB", { 2U, { 0x42, 0x72 } } },  // NOLINT
  { "FJD", { 2U, { 0x46, 0x24 } } },  // NOLINT
  { "GBP", { 1U, { 0xa3 } } },  // NOLINT
  { "GEL", { 4U, { 0x6c, 0x61, 0x72, 0x69 } } },  // NOLINT
  { "GHS", { 3U, { 0x47, 0x48, 0xa2 } } },  // NOLINT
  { "GNF", { 2U, { 0x47, 0x46 } } },  // NOLINT
  { "GTQ", { 1U, { 0x51 } } },  // NOLINT
  { "GYD", { 2U, { 0x47, 0x24 } } },  // NOLINT
  { "HKD", { 3U, { 0x48, 0x4b, 0x24 } } },  // NOLINT
  { "HNL", { 1U, { 0x4c } } },  // NOLINT
  { "HUF", { 2U, { 0x46, 0x74 } } },  // NOLINT
  { "IDR", { 2U, { 0x52, 0x70 } } },  // NOLINT
  { "IEP", { 3U, { 0x49, 0x52, 0xa3 } } },  // NOLINT
  { "IQD", { 2U, { 0x49, 0x44 } } },  // NOLINT
  { "IRR", { 2U, { 0x52, 0x49 } } },  // NOLINT
  { "ITL", { 1U, { 0x20a4 } } },  // NOLINT
  { "JMD", { 2U, { 0x4a, 0x24 } } },  // NOLINT
  { "JOD", { 2U, { 0x4a, 0x44 } } },  // NOLINT
  { "JPY", { 1U, { 0xa5 } } },  // NOLINT
  { "KES", { 4U, { 0x4b, 0x20, 0x53, 0x68 } } },  // NOLINT
  { "KGS", { 3U, { 0x73, 0x6f, 0x6d } } },  // NOLINT
  { "KHR", { 2U, { 0x43, 0x52 } } },  // NOLINT
  { "KMF", { 2U, { 0x43, 0x46 } } },  // NOLINT
  { "KWD", { 2U, { 0x4b, 0x44 } } },  // NOLINT
  { "KZT", { 1U, { 0x54 } } },  // NOLINT
  { "LBP", { 2U, { 0x4c, 0x4c } } },  // NOLINT
  { "LKR", { 5U, { 0x53, 0x4c, 0x20, 0x52, 0x65 } } },  // NOLINT
  { "LSL", { 1U, { 0x4d } } },  // NOLINT
  { "LYD", { 2U, { 0x4c, 0x44 } } },  // NOLINT
  { "MKD", { 4U, { 0x4d, 0x44, 0x65, 0x6e } } },  // NOLINT
  { "MNT", { 3U, { 0x54, 0x75, 0x67 } } },  // NOLINT
  { "MRO", { 2U, { 0x55, 0x4d } } },  // NOLINT
  { "MTL", { 2U, { 0x4c, 0x6d } } },  // NOLINT
  { "MWK", { 2U, { 0x4d, 0x4b } } },  // NOLINT
  { "MXN", { 4U, { 0x4d, 0x45, 0x58, 0x24 } } },  // NOLINT
  { "MYR", { 2U, { 0x52, 0x4d } } },  // NOLINT
  { "MZM", { 2U, { 0x4d, 0x74 } } },  // NOLINT
  { "MZN", { 3U, { 0x4d, 0x54, 0x6e } } },  // NOLINT
  { "NAD", { 2U, { 0x4e, 0x24 } } },  // NOLINT
  { "NOK", { 3U, { 0x4e, 0x4b, 0x72 } } },  // NOLINT
  { "NPR", { 3U, { 0x4e, 0x72, 0x73 } } },  // NOLINT
  { "NZD", { 3U, { 0x24, 0x4e, 0x5a } } },  // NOLINT
  { "OMR", { 2U, { 0x52, 0x4f } } },  // NOLINT
  { "PHP", { 3U, { 0x50, 0x68, 0x70 } } },  // NOLINT
  { "PKR", { 3U, { 0x50, 0x72, 0x61 } } },  // NOLINT
  { "PLN", { 2U, { 0x5a, 0x6c } } },  // NOLINT
  { "QAR", { 2U, { 0x51, 0x52 } } },  // NOLINT
  { "ROL", { 30U, { 0x3d, 0x30, 0x23, 0x4f, 0x6c, 0x64, 0x20, 0x6c, 0x65, 0x69, 0x7c, 0x31, 0x23, 0x4f, 0x6c, 0x64, 0x20, 0x6c, 0x65, 0x75, 0x7c, 0x31, 0x3c, 0x4f, 0x6c, 0x64, 0x20, 0x6c, 0x65, 0x69 } } },  // NOLINT
  { "RON", { 18U, { 0x3d, 0x30, 0x23, 0x6c, 0x65, 0x69, 0x7c, 0x31, 0x23, 0x6c, 0x65, 0x75, 0x7c, 0x31, 0x3c, 0x6c, 0x65, 0x69 } } },  // NOLINT
  { "SAR", { 3U, { 0x53, 0x52, 0x6c } } },  // NOLINT
  { "SBD", { 3U, { 0x53, 0x49, 0x24 } } },  // NOLINT
  { "SCR", { 2U, { 0x53, 0x52 } } },  // NOLINT
  { "SEK", { 3U, { 0x53, 0x4b, 0x72 } } },  // NOLINT
  { "SGD", { 2U, { 0x53, 0x24 } } },  // NOLINT
  { "SKK", { 2U, { 0x53, 0x6b } } },  // NOLINT
  { "SOS", { 7U, { 0x53, 0x6f, 0x2e, 0x20, 0x53, 0x68, 0x2e } } },  // NOLINT
  { "SRG", { 2U, { 0x53, 0x66 } } },  // NOLINT
  { "STD", { 2U, { 0x44, 0x62 } } },  // NOLINT
  { "SYP", { 2U, { 0x4c, 0x53 } } },  // NOLINT
  { "SZL", { 1U, { 0x45 } } },  // NOLINT
  { "TOP", { 2U, { 0x54, 0x24 } } },  // NOLINT
  { "TRL", { 2U, { 0x54, 0x4c } } },  // NOLINT
  { "TTD", { 3U, { 0x54, 0x54, 0x24 } } },  // NOLINT
  { "TWD", { 3U, { 0x4e, 0x54, 0x24 } } },  // NOLINT
  { "TZS", { 4U, { 0x54, 0x20, 0x53, 0x68 } } },  // NOLINT
  { "UGX", { 4U, { 0x55, 0x20, 0x53, 0x68 } } },  // NOLINT
  { "USD", { 1U, { 0x24 } } },  // NOLINT
  { "UYU", { 3U, { 0x55, 0x72, 0x24 } } },  // NOLINT
  { "VEB", { 2U, { 0x42, 0x65 } } },  // NOLINT
  { "VEF", { 3U, { 0x42, 0x73, 0x46 } } },  // NOLINT
  { "VUV", { 2U, { 0x56, 0x54 } } },  // NOLINT
  { "XCD", { 3U, { 0x45, 0x43, 0x24 } } },  // NOLINT
  { "XPF", { 4U, { 0x43, 0x46, 0x50, 0x46 } } },  // NOLINT
  { "YER", { 3U, { 0x59, 0x52, 0x6c } } },  // NOLINT
  { "ZAR", { 1U, { 0x52 } } },  // NOLINT
  { "ZWD", { 2U, { 0x5a, 0x24 } } }  // NOLINT
} };

class Currency {
 public:
  enum Type {
    AFN,
    ALL,
    AMD,
    ANG,
    ARS,
    AUD,
    BAM,
    BBD,
    BDT,
    BEF,
    BGL,
    BHD,
    BIF,
    BMD,
    BOB,
    BTN,
    BYR,
    BZD,
    CAD,
    CHF,
    CLP,
    CNY,
    COP,
    CRC,
    CVE,
    CYP,
    DJF,
    DKK,
    DOP,
    DZD,
    ESP,
    ETB,
    FJD,
    GBP,
    GEL,
    GHS,
    GNF,
    GTQ,
    GYD,
    HKD,
    HNL,
    HUF,
    IDR,
    IEP,
    IQD,
    IRR,
    ITL,
    JMD,
    JOD,
    JPY,
    KES,
    KGS,
    KHR,
    KMF,
    KWD,
    KZT,
    LBP,
    LKR,
    LSL,
    LYD,
    MKD,
    MNT,
    MRO,
    MTL,
    MWK,
    MXN,
    MYR,
    MZM,
    MZN,
    NAD,
    NOK,
    NPR,
    NZD,
    OMR,
    PHP,
    PKR,
    PLN,
    QAR,
    ROL,
    RON,
    SAR,
    SBD,
    SCR,
    SEK,
    SGD,
    SKK,
    SOS,
    SRG,
    STD,
    SYP,
    SZL,
    TOP,
    TRL,
    TTD,
    TWD,
    TZS,
    UGX,
    USD,
    UYU,
    VEB,
    VEF,
    VUV,
    XCD,
    XPF,
    YER,
    ZAR,
    ZWD,
    NUM_OF_CURRENCIES
  };

  enum Display {
    CODE,
    SYMBOL,
    NAME
  };

  typedef CurrencyData Data;
  typedef std::unordered_map<std::string, const Data*> CurrencyMap;

  static const Data* Lookup(StringPiece name) {
    const CurrencyMap::const_iterator it = Map().find(name);
    if (it != Map().end()) {
      return it->second;
    }
    return NULL;
  }

  static const Data* Lookup(Type type) {
    assert(type < NUM_OF_CURRENCIES);
    return kCurrencyData.data() + type;
  }

 private:
  static const CurrencyMap& Map() {
    static const CurrencyMap map = InitMap();
    return map;
  }

  static CurrencyMap InitMap() {
    CurrencyMap map;
    for (const Data* it = kCurrencyData.data(),  // NOLINT
         *last = kCurrencyData.data() + kCurrencyData.size();
         it != last; ++it) {
      map.insert(std::make_pair(it->name, it));
    }
    return map;
  }
};

} } }  // namespace iv::core::i18n
#endif  // IV_I18N_CURRENCY_H_
