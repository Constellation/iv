// This header is from java.lang.Character.java in Apache Harmony
//
// Licensed to the ASF
// Apache License
//
#ifndef IV_CHARACTER_H_
#define IV_CHARACTER_H_
#include <cassert>
#include <algorithm>
#include <iv/detail/cstdint.h>
#include <iv/detail/array.h>
namespace iv {
namespace core {
namespace character {
namespace code {

static const uint16_t CR = 0x000D;
static const uint16_t LF = 0x000A;
static const uint16_t ZWNJ = 0x200C;
static const uint16_t ZWJ = 0x200D;
static const uint16_t BOM = 0xFEFF;
static const uint16_t LINE_SEPARATOR = 0x2028;
static const uint16_t PARAGRAPH_SEPARATOR = 0x2029;

}  // namespace code

static const uint16_t kMinValue = 0;
static const uint16_t kMaxValue = 0xFFFF;

static const int kMinRadix = 2;
static const int kMaxRadix = 36;

enum Category {
  UNASSIGNED = 0,                  // Cn
  UPPERCASE_LETTER = 1,            // Lu
  LOWERCASE_LETTER = 2,            // Ll
  TITLECASE_LETTER = 3,            // Lt
  MODIFIER_LETTER = 4,             // Lm
  OTHER_LETTER = 5,                // Lo
  NON_SPACING_MARK = 6,            // Mn
  ENCLOSING_MARK = 7,              // Me
  COMBINING_SPACING_MARK = 8,      // Mc
  DECIMAL_DIGIT_NUMBER = 9,        // Nd
  LETTER_NUMBER = 10,              // Nl
  OTHER_NUMBER = 11,               // No
  SPACE_SEPARATOR = 12,            // Zs
  LINE_SEPARATOR = 13,             // Zl
  PARAGRAPH_SEPARATOR = 14,        // Zp
  CONTROL = 15,                    // Cc
  FORMAT = 16,                     // Cf
  PRIVATE_USE = 18,                // Co
  SURROGATE = 19,                  // Cs
  DASH_PUNCTUATION = 20,           // Pd
  START_PUNCTUATION = 21,          // Ps
  END_PUNCTUATION = 22,            // Pe
  CONNECTOR_PUNCTUATION = 23,      // Pc
  OTHER_PUNCTUATION = 24,          // Po
  MATH_SYMBOL = 25,                // Sm
  CURRENCY_SYMBOL = 26,            // Sc
  MODIFIER_SYMBOL = 27,            // Sk
  OTHER_SYMBOL = 28,               // So
  INITIAL_QUOTE_PUNCTUATION = 29,  // Pi
  FINAL_QUOTE_PUNCTUATION = 30     // Pf
};

enum CategoryFlag {
  Cn = 1 << UNASSIGNED,
  Lu = 1 << UPPERCASE_LETTER,
  Ll = 1 << LOWERCASE_LETTER,
  Lt = 1 << TITLECASE_LETTER,
  Lm = 1 << MODIFIER_LETTER,
  Lo = 1 << OTHER_LETTER,
  Mn = 1 << NON_SPACING_MARK,
  Me = 1 << ENCLOSING_MARK,
  Mc = 1 << COMBINING_SPACING_MARK,
  Nd = 1 << DECIMAL_DIGIT_NUMBER,
  Nl = 1 << LETTER_NUMBER,
  No = 1 << OTHER_NUMBER,
  Zs = 1 << SPACE_SEPARATOR,
  Zl = 1 << LINE_SEPARATOR,
  Zp = 1 << PARAGRAPH_SEPARATOR,
  Cc = 1 << CONTROL,
  Cf = 1 << FORMAT,
  Co = 1 << PRIVATE_USE,
  Cs = 1 << SURROGATE,
  Pd = 1 << DASH_PUNCTUATION,
  Ps = 1 << START_PUNCTUATION,
  Pe = 1 << END_PUNCTUATION,
  Pc = 1 << CONNECTOR_PUNCTUATION,
  Po = 1 << OTHER_PUNCTUATION,
  Sm = 1 << MATH_SYMBOL,
  Sc = 1 << CURRENCY_SYMBOL,
  Sk = 1 << MODIFIER_SYMBOL,
  So = 1 << OTHER_SYMBOL,
  Pi = 1 << INITIAL_QUOTE_PUNCTUATION,
  Pf = 1 << FINAL_QUOTE_PUNCTUATION
};

// unicode bidirectional constant
static const int kDirectionalityUndefined = -1;
static const int kDirectionalityLeftToRight = 0;                // L
static const int kDirectionalityRightToLeft = 1;                // R
static const int kDirectionalityRightToLeftArabic = 2;          // AL
static const int kDirectionalityEnuropeanNumber = 3;            // EN
static const int kDirectionalityEnuropeanNumberSeparator = 4;   // ES
static const int kDirectionalityEnuropeanNumberTerminator = 5;  // ET
static const int kDirectionalityEnuropeanArabicNumber = 6;      // AN
static const int kDirectionalityCommonNumberSeparator = 7;      // CS
static const int kDirectionalityNonspacingMark = 8;             // NSM
static const int kDirectionalityBoundaryNeutral = 9;            // BN
static const int kDirectionalityParagraphSeparator = 10;        // B
static const int kDirectionalitySegmentSeparator = 11;          // S
static const int kDirectionalityWhiteSpace = 12;                // WS
static const int kDirectionalityOtherNeutrals = 13;             // ON
static const int kDirectionalityLeftToRightEmbedding = 14;      // LRE
static const int kDirectionalityLeftToRightOverride = 15;       // LRO
static const int kDirectionalityRightToLeftEmbedding = 16;      // RLE
static const int kDirectionalityRightToLeftOverride = 17;       // RLO
static const int kDirectionalityPopDirectionalFormat = 18;      // PDF

static const int kSize = 16;

static const std::array<uint8_t, 1000> kCategoryCache = { {
  15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
  15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
  12, 24, 24, 24, 26, 24, 24, 24, 21, 22, 24, 25, 24, 20, 24, 24,
  9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 24, 24, 25, 25, 25, 24,
  24, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 21, 24, 22, 27, 23,
  27, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 21, 25, 22, 25, 15,
  15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
  15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
  12, 24, 26, 26, 26, 26, 28, 28, 27, 28, 2, 29, 25, 16, 28, 27,
  28, 25, 11, 11, 27, 2, 28, 24, 27, 11, 2, 30, 11, 11, 11, 24,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 25, 1, 1, 1, 1, 1, 1, 1, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 25, 2, 2, 2, 2, 2, 2, 2, 2,
  1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
  1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
  1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
  1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1,
  2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2,
  1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
  1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
  1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 2,
  2, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 1, 1,
  1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1,
  1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 2, 1, 2, 1, 1,
  2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 5, 1, 2, 2, 2,
  5, 5, 5, 5, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 2, 1,
  2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2,
  1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
  2, 1, 3, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2,
  1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
  1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
  1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
  1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 1, 2, 1, 1, 2,
  2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 27, 27, 27, 27, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
  4, 4, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
  4, 4, 4, 4, 4, 27, 27, 27, 27, 27, 27, 27, 4, 27, 4, 27,
  27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
  1, 2, 1, 2, 4, 27, 1, 2, 0, 0, 4, 2, 2, 2, 24, 0,
  0, 0, 0, 0, 27, 27, 1, 24, 1, 1, 1, 0, 1, 0, 1, 1,
  2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
  2, 2, 1, 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2,
  1, 2, 1, 2, 1, 2, 1, 2
} };

static const std::array<uint16_t, 1327> kCategoryKeys = { {
0x3E8, 0x3EF, 0x3F4, 0x3F5, 0x3F6, 0x3F7, 0x3F8, 0x3F9, 0x3FB, 0x3FD,
0x430, 0x460, 0x461, 0x462, 0x463, 0x464, 0x465, 0x466, 0x467, 0x468,
0x469, 0x46A, 0x46B, 0x46C, 0x46D, 0x46E, 0x46F, 0x470, 0x471, 0x472,
0x473, 0x474, 0x475, 0x476, 0x477, 0x478, 0x479, 0x47A, 0x47B, 0x47C,
0x47D, 0x47E, 0x47F, 0x480, 0x481, 0x482, 0x483, 0x488, 0x48A, 0x4C0,
0x4C2, 0x4CE, 0x4D0, 0x531, 0x559, 0x55A, 0x561, 0x589, 0x591, 0x5BE,
0x5BF, 0x5C0, 0x5C1, 0x5C3, 0x5C4, 0x5C6, 0x5D0, 0x5F0, 0x5F3, 0x600,
0x606, 0x609, 0x60B, 0x60C, 0x60E, 0x610, 0x61B, 0x61E, 0x620, 0x640,
0x641, 0x64B, 0x660, 0x66A, 0x66E, 0x670, 0x671, 0x6D4, 0x6D6, 0x6DD,
0x6DF, 0x6E5, 0x6E7, 0x6E9, 0x6EA, 0x6EE, 0x6F0, 0x6FA, 0x6FD, 0x6FF,
0x700, 0x70F, 0x710, 0x711, 0x712, 0x730, 0x74D, 0x7A6, 0x7B1, 0x7C0,
0x7CA, 0x7EB, 0x7F4, 0x7F6, 0x7F7, 0x7FA, 0x800, 0x816, 0x81A, 0x81B,
0x824, 0x825, 0x828, 0x829, 0x830, 0x840, 0x859, 0x85E, 0x900, 0x903,
0x904, 0x93A, 0x93B, 0x93C, 0x93D, 0x93E, 0x941, 0x949, 0x94D, 0x94E,
0x950, 0x951, 0x958, 0x962, 0x964, 0x966, 0x970, 0x972, 0x979, 0x981,
0x982, 0x985, 0x98F, 0x993, 0x9AA, 0x9B2, 0x9B6, 0x9BC, 0x9BE, 0x9C1,
0x9C7, 0x9CB, 0x9CD, 0x9D7, 0x9DC, 0x9DF, 0x9E2, 0x9E6, 0x9F0, 0x9F2,
0x9F4, 0x9FA, 0xA01, 0xA03, 0xA05, 0xA0F, 0xA13, 0xA2A, 0xA32, 0xA35,
0xA38, 0xA3C, 0xA3E, 0xA41, 0xA47, 0xA4B, 0xA51, 0xA59, 0xA5E, 0xA66,
0xA70, 0xA72, 0xA75, 0xA81, 0xA83, 0xA85, 0xA8F, 0xA93, 0xAAA, 0xAB2,
0xAB5, 0xABC, 0xABE, 0xAC1, 0xAC7, 0xAC9, 0xACB, 0xACD, 0xAD0, 0xAE0,
0xAE2, 0xAE6, 0xAF1, 0xB01, 0xB02, 0xB05, 0xB0F, 0xB13, 0xB2A, 0xB32,
0xB35, 0xB3C, 0xB3D, 0xB3E, 0xB3F, 0xB40, 0xB41, 0xB47, 0xB4B, 0xB4D,
0xB56, 0xB5C, 0xB5F, 0xB62, 0xB66, 0xB70, 0xB72, 0xB82, 0xB85, 0xB8E,
0xB92, 0xB99, 0xB9C, 0xB9E, 0xBA3, 0xBA8, 0xBAE, 0xBBE, 0xBC0, 0xBC1,
0xBC6, 0xBCA, 0xBCD, 0xBD0, 0xBD7, 0xBE6, 0xBF0, 0xBF3, 0xBF9, 0xC01,
0xC05, 0xC0E, 0xC12, 0xC2A, 0xC35, 0xC3D, 0xC3E, 0xC41, 0xC46, 0xC4A,
0xC55, 0xC58, 0xC60, 0xC62, 0xC66, 0xC78, 0xC7F, 0xC82, 0xC85, 0xC8E,
0xC92, 0xCAA, 0xCB5, 0xCBC, 0xCBD, 0xCBE, 0xCBF, 0xCC0, 0xCC6, 0xCC7,
0xCCA, 0xCCC, 0xCD5, 0xCDE, 0xCE0, 0xCE2, 0xCE6, 0xCF1, 0xD02, 0xD05,
0xD0E, 0xD12, 0xD3D, 0xD3E, 0xD41, 0xD46, 0xD4A, 0xD4D, 0xD57, 0xD60,
0xD62, 0xD66, 0xD70, 0xD79, 0xD7A, 0xD82, 0xD85, 0xD9A, 0xDB3, 0xDBD,
0xDC0, 0xDCA, 0xDCF, 0xDD2, 0xDD6, 0xDD8, 0xDF2, 0xDF4, 0xE01, 0xE31,
0xE32, 0xE34, 0xE3F, 0xE40, 0xE46, 0xE47, 0xE4F, 0xE50, 0xE5A, 0xE81,
0xE84, 0xE87, 0xE8A, 0xE8D, 0xE94, 0xE99, 0xEA1, 0xEA5, 0xEA7, 0xEAA,
0xEAD, 0xEB1, 0xEB2, 0xEB4, 0xEBB, 0xEBD, 0xEC0, 0xEC6, 0xEC8, 0xED0,
0xEDC, 0xF00, 0xF01, 0xF04, 0xF13, 0xF18, 0xF1A, 0xF20, 0xF2A, 0xF34,
0xF35, 0xF36, 0xF37, 0xF38, 0xF39, 0xF3A, 0xF3B, 0xF3C, 0xF3D, 0xF3E,
0xF40, 0xF49, 0xF71, 0xF7F, 0xF80, 0xF85, 0xF86, 0xF88, 0xF8D, 0xF99,
0xFBE, 0xFC6, 0xFC7, 0xFCE, 0xFD0, 0xFD5, 0xFD9, 0x1000, 0x102B, 0x102D,
0x1031, 0x1032, 0x1038, 0x1039, 0x103B, 0x103D, 0x103F, 0x1040, 0x104A, 0x1050,
0x1056, 0x1058, 0x105A, 0x105E, 0x1061, 0x1062, 0x1065, 0x1067, 0x106E, 0x1071,
0x1075, 0x1082, 0x1083, 0x1085, 0x1087, 0x108D, 0x108E, 0x108F, 0x1090, 0x109A,
0x109D, 0x109E, 0x10A0, 0x10D0, 0x10FB, 0x1100, 0x124A, 0x1250, 0x1258, 0x125A,
0x1260, 0x128A, 0x1290, 0x12B2, 0x12B8, 0x12C0, 0x12C2, 0x12C8, 0x12D8, 0x1312,
0x1318, 0x135D, 0x1360, 0x1361, 0x1369, 0x1380, 0x1390, 0x13A0, 0x1400, 0x1401,
0x166D, 0x166F, 0x1680, 0x1681, 0x169B, 0x16A0, 0x16EB, 0x16EE, 0x1700, 0x170E,
0x1712, 0x1720, 0x1732, 0x1735, 0x1740, 0x1752, 0x1760, 0x176E, 0x1772, 0x1780,
0x17B4, 0x17B6, 0x17B7, 0x17BE, 0x17C6, 0x17C7, 0x17C9, 0x17D4, 0x17D7, 0x17D8,
0x17DB, 0x17DC, 0x17DD, 0x17E0, 0x17F0, 0x1800, 0x1806, 0x1807, 0x180B, 0x180E,
0x1810, 0x1820, 0x1843, 0x1844, 0x1880, 0x18A9, 0x18B0, 0x1900, 0x1920, 0x1923,
0x1927, 0x1929, 0x1930, 0x1932, 0x1933, 0x1939, 0x1940, 0x1944, 0x1946, 0x1950,
0x1970, 0x1980, 0x19B0, 0x19C1, 0x19C8, 0x19D0, 0x19DA, 0x19DE, 0x1A00, 0x1A17,
0x1A19, 0x1A1E, 0x1A20, 0x1A55, 0x1A58, 0x1A60, 0x1A63, 0x1A65, 0x1A6D, 0x1A73,
0x1A7F, 0x1A80, 0x1A90, 0x1AA0, 0x1AA7, 0x1AA8, 0x1B00, 0x1B04, 0x1B05, 0x1B34,
0x1B36, 0x1B3B, 0x1B3D, 0x1B42, 0x1B43, 0x1B45, 0x1B50, 0x1B5A, 0x1B61, 0x1B6B,
0x1B74, 0x1B80, 0x1B82, 0x1B83, 0x1BA1, 0x1BA2, 0x1BA6, 0x1BA8, 0x1BAA, 0x1BAE,
0x1BB0, 0x1BC0, 0x1BE6, 0x1BE8, 0x1BEA, 0x1BED, 0x1BEF, 0x1BF2, 0x1BFC, 0x1C00,
0x1C24, 0x1C2C, 0x1C34, 0x1C36, 0x1C3B, 0x1C40, 0x1C4D, 0x1C50, 0x1C5A, 0x1C78,
0x1C7E, 0x1CD0, 0x1CD3, 0x1CD4, 0x1CE1, 0x1CE2, 0x1CE9, 0x1CED, 0x1CEE, 0x1CF2,
0x1D00, 0x1D2C, 0x1D62, 0x1D78, 0x1D79, 0x1D9B, 0x1DC0, 0x1DFC, 0x1E00, 0x1E95,
0x1E9E, 0x1EFF, 0x1F08, 0x1F10, 0x1F18, 0x1F20, 0x1F28, 0x1F30, 0x1F38, 0x1F40,
0x1F48, 0x1F50, 0x1F59, 0x1F5B, 0x1F5D, 0x1F5F, 0x1F60, 0x1F68, 0x1F70, 0x1F80,
0x1F88, 0x1F90, 0x1F98, 0x1FA0, 0x1FA8, 0x1FB0, 0x1FB6, 0x1FB8, 0x1FBC, 0x1FBD,
0x1FBE, 0x1FBF, 0x1FC2, 0x1FC6, 0x1FC8, 0x1FCC, 0x1FCD, 0x1FD0, 0x1FD6, 0x1FD8,
0x1FDD, 0x1FE0, 0x1FE8, 0x1FED, 0x1FF2, 0x1FF6, 0x1FF8, 0x1FFC, 0x1FFD, 0x2000,
0x200B, 0x2010, 0x2016, 0x2018, 0x2019, 0x201A, 0x201B, 0x201D, 0x201E, 0x201F,
0x2020, 0x2028, 0x202A, 0x202F, 0x2030, 0x2039, 0x203B, 0x203F, 0x2041, 0x2044,
0x2045, 0x2046, 0x2047, 0x2052, 0x2053, 0x2054, 0x2055, 0x205F, 0x2060, 0x206A,
0x2070, 0x2074, 0x207A, 0x207D, 0x207E, 0x207F, 0x2080, 0x208A, 0x208D, 0x2090,
0x20A0, 0x20D0, 0x20DD, 0x20E1, 0x20E2, 0x20E5, 0x2100, 0x2102, 0x2103, 0x2107,
0x2108, 0x210A, 0x210B, 0x210E, 0x2110, 0x2113, 0x2114, 0x2115, 0x2116, 0x2118,
0x2119, 0x211E, 0x2124, 0x212A, 0x212E, 0x2130, 0x2134, 0x2135, 0x2139, 0x213A,
0x213C, 0x213E, 0x2140, 0x2145, 0x2146, 0x214A, 0x214C, 0x214E, 0x2150, 0x2160,
0x2183, 0x2185, 0x2189, 0x2190, 0x2195, 0x219A, 0x219C, 0x21A0, 0x21A1, 0x21A3,
0x21A4, 0x21A6, 0x21A7, 0x21AE, 0x21AF, 0x21CE, 0x21D0, 0x21D2, 0x21D5, 0x21F4,
0x2300, 0x2308, 0x230C, 0x2320, 0x2322, 0x2329, 0x232B, 0x237C, 0x237D, 0x239B,
0x23B4, 0x23DC, 0x23E2, 0x2400, 0x2440, 0x2460, 0x249C, 0x24EA, 0x2500, 0x25B7,
0x25B8, 0x25C1, 0x25C2, 0x25F8, 0x2600, 0x266F, 0x2670, 0x2701, 0x2768, 0x2776,
0x2794, 0x27C0, 0x27C5, 0x27C7, 0x27CC, 0x27CE, 0x27E6, 0x27F0, 0x2800, 0x2900,
0x2983, 0x2999, 0x29D8, 0x29DC, 0x29FC, 0x29FE, 0x2B00, 0x2B30, 0x2B45, 0x2B47,
0x2B50, 0x2C00, 0x2C30, 0x2C60, 0x2C62, 0x2C65, 0x2C67, 0x2C6D, 0x2C71, 0x2C73,
0x2C75, 0x2C76, 0x2C7D, 0x2C7E, 0x2C81, 0x2CE3, 0x2CE5, 0x2CEB, 0x2CEF, 0x2CF9,
0x2CFD, 0x2CFE, 0x2D00, 0x2D30, 0x2D6F, 0x2D7F, 0x2D80, 0x2DA0, 0x2DA8, 0x2DB0,
0x2DB8, 0x2DC0, 0x2DC8, 0x2DD0, 0x2DD8, 0x2DE0, 0x2E00, 0x2E02, 0x2E06, 0x2E09,
0x2E0A, 0x2E0B, 0x2E0C, 0x2E0D, 0x2E0E, 0x2E17, 0x2E18, 0x2E1A, 0x2E1B, 0x2E1C,
0x2E1D, 0x2E1E, 0x2E20, 0x2E21, 0x2E22, 0x2E23, 0x2E24, 0x2E25, 0x2E26, 0x2E27,
0x2E28, 0x2E29, 0x2E2A, 0x2E2F, 0x2E30, 0x2E80, 0x2E9B, 0x2F00, 0x2FF0, 0x3000,
0x3001, 0x3004, 0x3005, 0x3006, 0x3007, 0x3008, 0x3009, 0x300A, 0x300B, 0x300C,
0x300D, 0x300E, 0x300F, 0x3010, 0x3011, 0x3012, 0x3014, 0x3015, 0x3016, 0x3017,
0x3018, 0x3019, 0x301A, 0x301B, 0x301C, 0x301D, 0x301E, 0x3020, 0x3021, 0x302A,
0x3030, 0x3031, 0x3036, 0x3038, 0x303B, 0x303C, 0x303D, 0x303E, 0x3041, 0x3099,
0x309B, 0x309D, 0x309F, 0x30A1, 0x30FB, 0x30FC, 0x30FF, 0x3105, 0x3131, 0x3190,
0x3192, 0x3196, 0x31A0, 0x31C0, 0x31F0, 0x3200, 0x3220, 0x322A, 0x3251, 0x3260,
0x3280, 0x328A, 0x32B1, 0x32C0, 0x3300, 0x3400, 0x4DC0, 0x4E00, 0xA000, 0xA015,
0xA016, 0xA490, 0xA4D0, 0xA4F8, 0xA4FE, 0xA500, 0xA60C, 0xA60D, 0xA610, 0xA620,
0xA62A, 0xA640, 0xA641, 0xA642, 0xA643, 0xA644, 0xA645, 0xA646, 0xA647, 0xA648,
0xA649, 0xA64A, 0xA64B, 0xA64C, 0xA64D, 0xA64E, 0xA64F, 0xA650, 0xA651, 0xA652,
0xA653, 0xA654, 0xA655, 0xA656, 0xA657, 0xA658, 0xA659, 0xA65A, 0xA65B, 0xA65C,
0xA65D, 0xA65E, 0xA65F, 0xA660, 0xA661, 0xA662, 0xA663, 0xA664, 0xA665, 0xA666,
0xA667, 0xA668, 0xA669, 0xA66A, 0xA66B, 0xA66C, 0xA66D, 0xA66E, 0xA66F, 0xA670,
0xA673, 0xA67C, 0xA67E, 0xA67F, 0xA680, 0xA681, 0xA682, 0xA683, 0xA684, 0xA685,
0xA686, 0xA687, 0xA688, 0xA689, 0xA68A, 0xA68B, 0xA68C, 0xA68D, 0xA68E, 0xA68F,
0xA690, 0xA691, 0xA692, 0xA693, 0xA694, 0xA695, 0xA696, 0xA697, 0xA6A0, 0xA6E6,
0xA6F0, 0xA6F2, 0xA700, 0xA717, 0xA720, 0xA722, 0xA72F, 0xA732, 0xA733, 0xA734,
0xA735, 0xA736, 0xA737, 0xA738, 0xA739, 0xA73A, 0xA73B, 0xA73C, 0xA73D, 0xA73E,
0xA73F, 0xA740, 0xA741, 0xA742, 0xA743, 0xA744, 0xA745, 0xA746, 0xA747, 0xA748,
0xA749, 0xA74A, 0xA74B, 0xA74C, 0xA74D, 0xA74E, 0xA74F, 0xA750, 0xA751, 0xA752,
0xA753, 0xA754, 0xA755, 0xA756, 0xA757, 0xA758, 0xA759, 0xA75A, 0xA75B, 0xA75C,
0xA75D, 0xA75E, 0xA75F, 0xA760, 0xA761, 0xA762, 0xA763, 0xA764, 0xA765, 0xA766,
0xA767, 0xA768, 0xA769, 0xA76A, 0xA76B, 0xA76C, 0xA76D, 0xA76E, 0xA76F, 0xA770,
0xA771, 0xA779, 0xA77D, 0xA77F, 0xA780, 0xA781, 0xA782, 0xA783, 0xA784, 0xA785,
0xA786, 0xA787, 0xA788, 0xA789, 0xA78B, 0xA790, 0xA7A0, 0xA7FA, 0xA7FB, 0xA802,
0xA803, 0xA806, 0xA807, 0xA80B, 0xA80C, 0xA823, 0xA825, 0xA827, 0xA828, 0xA830,
0xA836, 0xA838, 0xA840, 0xA874, 0xA880, 0xA882, 0xA8B4, 0xA8C4, 0xA8CE, 0xA8D0,
0xA8E0, 0xA8F2, 0xA8F8, 0xA8FB, 0xA900, 0xA90A, 0xA926, 0xA92E, 0xA930, 0xA947,
0xA952, 0xA95F, 0xA960, 0xA980, 0xA983, 0xA984, 0xA9B3, 0xA9B4, 0xA9B6, 0xA9BA,
0xA9BC, 0xA9BD, 0xA9C1, 0xA9CF, 0xA9D0, 0xA9DE, 0xAA00, 0xAA29, 0xAA2F, 0xAA31,
0xAA33, 0xAA35, 0xAA40, 0xAA43, 0xAA44, 0xAA4C, 0xAA50, 0xAA5C, 0xAA60, 0xAA70,
0xAA71, 0xAA77, 0xAA7A, 0xAA80, 0xAAB0, 0xAAB2, 0xAAB5, 0xAAB7, 0xAAB9, 0xAABE,
0xAAC0, 0xAADB, 0xAADD, 0xAADE, 0xAB01, 0xAB09, 0xAB11, 0xAB20, 0xAB28, 0xABC0,
0xABE3, 0xABE5, 0xABE6, 0xABE8, 0xABE9, 0xABEB, 0xABEC, 0xABED, 0xABF0, 0xAC00,
0xD7B0, 0xD7CB, 0xD800, 0xE000, 0xF900, 0xFA30, 0xFA70, 0xFB00, 0xFB13, 0xFB1D,
0xFB1F, 0xFB29, 0xFB2A, 0xFB38, 0xFB3E, 0xFB40, 0xFB43, 0xFB46, 0xFBB2, 0xFBD3,
0xFD3E, 0xFD50, 0xFD92, 0xFDF0, 0xFDFC, 0xFE00, 0xFE10, 0xFE17, 0xFE18, 0xFE19,
0xFE20, 0xFE30, 0xFE31, 0xFE33, 0xFE35, 0xFE45, 0xFE47, 0xFE49, 0xFE4D, 0xFE50,
0xFE54, 0xFE58, 0xFE59, 0xFE5A, 0xFE5B, 0xFE5C, 0xFE5D, 0xFE5E, 0xFE5F, 0xFE62,
0xFE64, 0xFE68, 0xFE6A, 0xFE70, 0xFE76, 0xFEFF, 0xFF01, 0xFF04, 0xFF05, 0xFF08,
0xFF09, 0xFF0A, 0xFF0B, 0xFF0C, 0xFF0D, 0xFF0E, 0xFF10, 0xFF1A, 0xFF1C, 0xFF1F,
0xFF21, 0xFF3B, 0xFF3C, 0xFF3D, 0xFF3E, 0xFF3F, 0xFF40, 0xFF41, 0xFF5B, 0xFF5C,
0xFF5D, 0xFF5E, 0xFF5F, 0xFF60, 0xFF61, 0xFF62, 0xFF63, 0xFF64, 0xFF66, 0xFF70,
0xFF71, 0xFF9E, 0xFFA0, 0xFFC2, 0xFFCA, 0xFFD2, 0xFFDA, 0xFFE0, 0xFFE2, 0xFFE3,
0xFFE4, 0xFFE5, 0xFFE8, 0xFFE9, 0xFFED, 0xFFF9, 0xFFFC
} };

static const std::array<uint16_t, 2654> kCategoryValues = { {
0x3EE, 0x201, 0x3F3, 0x2, 0x3F4, 0x1, 0x3F5, 0x2, 0x3F6, 0x19,
0x3F7, 0x1, 0x3F8, 0x2, 0x3FA, 0x1, 0x3FC, 0x2, 0x42F, 0x1,
0x45F, 0x2, 0x460, 0x1, 0x461, 0x2, 0x462, 0x1, 0x463, 0x2,
0x464, 0x1, 0x465, 0x2, 0x466, 0x1, 0x467, 0x2, 0x468, 0x1,
0x469, 0x2, 0x46A, 0x1, 0x46B, 0x2, 0x46C, 0x1, 0x46D, 0x2,
0x46E, 0x1, 0x46F, 0x2, 0x470, 0x1, 0x471, 0x2, 0x472, 0x1,
0x473, 0x2, 0x474, 0x1, 0x475, 0x2, 0x476, 0x1, 0x477, 0x2,
0x478, 0x1, 0x479, 0x2, 0x47A, 0x1, 0x47B, 0x2, 0x47C, 0x1,
0x47D, 0x2, 0x47E, 0x1, 0x47F, 0x2, 0x480, 0x1, 0x481, 0x2,
0x482, 0x1C, 0x487, 0x6, 0x489, 0x7, 0x4BF, 0x201, 0x4C1, 0x1,
0x4CD, 0x102, 0x4CF, 0x2, 0x527, 0x201, 0x556, 0x1, 0x559, 0x4,
0x55F, 0x18, 0x587, 0x2, 0x58A, 0x1814, 0x5BD, 0x6, 0x5BE, 0x14,
0x5BF, 0x6, 0x5C0, 0x18, 0x5C2, 0x6, 0x5C3, 0x18, 0x5C5, 0x6,
0x5C7, 0x618, 0x5EA, 0x5, 0x5F2, 0x5, 0x5F4, 0x18, 0x603, 0x10,
0x608, 0x19, 0x60A, 0x18, 0x60B, 0x1A, 0x60D, 0x18, 0x60F, 0x1C,
0x61A, 0x6, 0x61B, 0x18, 0x61F, 0x18, 0x63F, 0x5, 0x640, 0x4,
0x64A, 0x5, 0x65F, 0x6, 0x669, 0x9, 0x66D, 0x18, 0x66F, 0x5,
0x670, 0x6, 0x6D3, 0x5, 0x6D5, 0x518, 0x6DC, 0x6, 0x6DE, 0x101C,
0x6E4, 0x6, 0x6E6, 0x4, 0x6E8, 0x6, 0x6E9, 0x1C, 0x6ED, 0x6,
0x6EF, 0x5, 0x6F9, 0x9, 0x6FC, 0x5, 0x6FE, 0x1C, 0x6FF, 0x5,
0x70D, 0x18, 0x70F, 0x10, 0x710, 0x5, 0x711, 0x6, 0x72F, 0x5,
0x74A, 0x6, 0x7A5, 0x5, 0x7B0, 0x6, 0x7B1, 0x5, 0x7C9, 0x9,
0x7EA, 0x5, 0x7F3, 0x6, 0x7F5, 0x4, 0x7F6, 0x1C, 0x7F9, 0x18,
0x7FA, 0x4, 0x815, 0x5, 0x819, 0x6, 0x81A, 0x4, 0x823, 0x6,
0x824, 0x4, 0x827, 0x6, 0x828, 0x4, 0x82D, 0x6, 0x83E, 0x18,
0x858, 0x5, 0x85B, 0x6, 0x85E, 0x18, 0x902, 0x6, 0x903, 0x8,
0x939, 0x5, 0x93A, 0x6, 0x93B, 0x8, 0x93C, 0x6, 0x93D, 0x5,
0x940, 0x8, 0x948, 0x6, 0x94C, 0x8, 0x94D, 0x6, 0x94F, 0x8,
0x950, 0x5, 0x957, 0x6, 0x961, 0x5, 0x963, 0x6, 0x965, 0x18,
0x96F, 0x9, 0x971, 0x418, 0x977, 0x5, 0x97F, 0x5, 0x981, 0x6,
0x983, 0x8, 0x98C, 0x5, 0x990, 0x5, 0x9A8, 0x5, 0x9B0, 0x5,
0x9B2, 0x5, 0x9B9, 0x5, 0x9BD, 0x506, 0x9C0, 0x8, 0x9C4, 0x6,
0x9C8, 0x8, 0x9CC, 0x8, 0x9CE, 0x605, 0x9D7, 0x8, 0x9DD, 0x5,
0x9E1, 0x5, 0x9E3, 0x6, 0x9EF, 0x9, 0x9F1, 0x5, 0x9F3, 0x1A,
0x9F9, 0xB, 0x9FB, 0x1A1C, 0xA02, 0x6, 0xA03, 0x8, 0xA0A, 0x5,
0xA10, 0x5, 0xA28, 0x5, 0xA30, 0x5, 0xA33, 0x5, 0xA36, 0x5,
0xA39, 0x5, 0xA3C, 0x6, 0xA40, 0x8, 0xA42, 0x6, 0xA48, 0x6,
0xA4D, 0x6, 0xA51, 0x6, 0xA5C, 0x5, 0xA5E, 0x5, 0xA6F, 0x9,
0xA71, 0x6, 0xA74, 0x5, 0xA75, 0x6, 0xA82, 0x6, 0xA83, 0x8,
0xA8D, 0x5, 0xA91, 0x5, 0xAA8, 0x5, 0xAB0, 0x5, 0xAB3, 0x5,
0xAB9, 0x5, 0xABD, 0x506, 0xAC0, 0x8, 0xAC5, 0x6, 0xAC8, 0x6,
0xAC9, 0x8, 0xACC, 0x8, 0xACD, 0x6, 0xAD0, 0x5, 0xAE1, 0x5,
0xAE3, 0x6, 0xAEF, 0x9, 0xAF1, 0x1A, 0xB01, 0x6, 0xB03, 0x8,
0xB0C, 0x5, 0xB10, 0x5, 0xB28, 0x5, 0xB30, 0x5, 0xB33, 0x5,
0xB39, 0x5, 0xB3C, 0x6, 0xB3D, 0x5, 0xB3E, 0x8, 0xB3F, 0x6,
0xB40, 0x8, 0xB44, 0x6, 0xB48, 0x8, 0xB4C, 0x8, 0xB4D, 0x6,
0xB57, 0x806, 0xB5D, 0x5, 0xB61, 0x5, 0xB63, 0x6, 0xB6F, 0x9,
0xB71, 0x51C, 0xB77, 0xB, 0xB83, 0x506, 0xB8A, 0x5, 0xB90, 0x5,
0xB95, 0x5, 0xB9A, 0x5, 0xB9C, 0x5, 0xB9F, 0x5, 0xBA4, 0x5,
0xBAA, 0x5, 0xBB9, 0x5, 0xBBF, 0x8, 0xBC0, 0x6, 0xBC2, 0x8,
0xBC8, 0x8, 0xBCC, 0x8, 0xBCD, 0x6, 0xBD0, 0x5, 0xBD7, 0x8,
0xBEF, 0x9, 0xBF2, 0xB, 0xBF8, 0x1C, 0xBFA, 0x1A1C, 0xC03, 0x8,
0xC0C, 0x5, 0xC10, 0x5, 0xC28, 0x5, 0xC33, 0x5, 0xC39, 0x5,
0xC3D, 0x5, 0xC40, 0x6, 0xC44, 0x8, 0xC48, 0x6, 0xC4D, 0x6,
0xC56, 0x6, 0xC59, 0x5, 0xC61, 0x5, 0xC63, 0x6, 0xC6F, 0x9,
0xC7E, 0xB, 0xC7F, 0x1C, 0xC83, 0x8, 0xC8C, 0x5, 0xC90, 0x5,
0xCA8, 0x5, 0xCB3, 0x5, 0xCB9, 0x5, 0xCBC, 0x6, 0xCBD, 0x5,
0xCBE, 0x8, 0xCBF, 0x6, 0xCC4, 0x8, 0xCC6, 0x6, 0xCC8, 0x8,
0xCCB, 0x8, 0xCCD, 0x6, 0xCD6, 0x8, 0xCDE, 0x5, 0xCE1, 0x5,
0xCE3, 0x6, 0xCEF, 0x9, 0xCF2, 0x5, 0xD03, 0x8, 0xD0C, 0x5,
0xD10, 0x5, 0xD3A, 0x5, 0xD3D, 0x5, 0xD40, 0x8, 0xD44, 0x6,
0xD48, 0x8, 0xD4C, 0x8, 0xD4E, 0x605, 0xD57, 0x8, 0xD61, 0x5,
0xD63, 0x6, 0xD6F, 0x9, 0xD75, 0xB, 0xD79, 0x1C, 0xD7F, 0x5,
0xD83, 0x8, 0xD96, 0x5, 0xDB1, 0x5, 0xDBB, 0x5, 0xDBD, 0x5,
0xDC6, 0x5, 0xDCA, 0x6, 0xDD1, 0x8, 0xDD4, 0x6, 0xDD6, 0x6,
0xDDF, 0x8, 0xDF3, 0x8, 0xDF4, 0x18, 0xE30, 0x5, 0xE31, 0x6,
0xE33, 0x5, 0xE3A, 0x6, 0xE3F, 0x1A, 0xE45, 0x5, 0xE46, 0x4,
0xE4E, 0x6, 0xE4F, 0x18, 0xE59, 0x9, 0xE5B, 0x18, 0xE82, 0x5,
0xE84, 0x5, 0xE88, 0x5, 0xE8A, 0x5, 0xE8D, 0x5, 0xE97, 0x5,
0xE9F, 0x5, 0xEA3, 0x5, 0xEA5, 0x5, 0xEA7, 0x5, 0xEAB, 0x5,
0xEB0, 0x5, 0xEB1, 0x6, 0xEB3, 0x5, 0xEB9, 0x6, 0xEBC, 0x6,
0xEBD, 0x5, 0xEC4, 0x5, 0xEC6, 0x4, 0xECD, 0x6, 0xED9, 0x9,
0xEDD, 0x5, 0xF00, 0x5, 0xF03, 0x1C, 0xF12, 0x18, 0xF17, 0x1C,
0xF19, 0x6, 0xF1F, 0x1C, 0xF29, 0x9, 0xF33, 0xB, 0xF34, 0x1C,
0xF35, 0x6, 0xF36, 0x1C, 0xF37, 0x6, 0xF38, 0x1C, 0xF39, 0x6,
0xF3A, 0x15, 0xF3B, 0x16, 0xF3C, 0x15, 0xF3D, 0x16, 0xF3F, 0x8,
0xF47, 0x5, 0xF6C, 0x5, 0xF7E, 0x6, 0xF7F, 0x8, 0xF84, 0x6,
0xF85, 0x18, 0xF87, 0x6, 0xF8C, 0x5, 0xF97, 0x6, 0xFBC, 0x6,
0xFC5, 0x1C, 0xFC6, 0x6, 0xFCC, 0x1C, 0xFCF, 0x1C, 0xFD4, 0x18,
0xFD8, 0x1C, 0xFDA, 0x18, 0x102A, 0x5, 0x102C, 0x8, 0x1030, 0x6,
0x1031, 0x8, 0x1037, 0x6, 0x1038, 0x8, 0x103A, 0x6, 0x103C, 0x8,
0x103E, 0x6, 0x103F, 0x5, 0x1049, 0x9, 0x104F, 0x18, 0x1055, 0x5,
0x1057, 0x8, 0x1059, 0x6, 0x105D, 0x5, 0x1060, 0x6, 0x1061, 0x5,
0x1064, 0x8, 0x1066, 0x5, 0x106D, 0x8, 0x1070, 0x5, 0x1074, 0x6,
0x1081, 0x5, 0x1082, 0x6, 0x1084, 0x8, 0x1086, 0x6, 0x108C, 0x8,
0x108D, 0x6, 0x108E, 0x5, 0x108F, 0x8, 0x1099, 0x9, 0x109C, 0x8,
0x109D, 0x6, 0x109F, 0x1C, 0x10C5, 0x1, 0x10FA, 0x5, 0x10FC, 0x1804,
0x1248, 0x5, 0x124D, 0x5, 0x1256, 0x5, 0x1258, 0x5, 0x125D, 0x5,
0x1288, 0x5, 0x128D, 0x5, 0x12B0, 0x5, 0x12B5, 0x5, 0x12BE, 0x5,
0x12C0, 0x5, 0x12C5, 0x5, 0x12D6, 0x5, 0x1310, 0x5, 0x1315, 0x5,
0x135A, 0x5, 0x135F, 0x6, 0x1360, 0x1C, 0x1368, 0x18, 0x137C, 0xB,
0x138F, 0x5, 0x1399, 0x1C, 0x13F4, 0x5, 0x1400, 0x14, 0x166C, 0x5,
0x166E, 0x18, 0x167F, 0x5, 0x1680, 0xC, 0x169A, 0x5, 0x169C, 0x1516,
0x16EA, 0x5, 0x16ED, 0x18, 0x16F0, 0xA, 0x170C, 0x5, 0x1711, 0x5,
0x1714, 0x6, 0x1731, 0x5, 0x1734, 0x6, 0x1736, 0x18, 0x1751, 0x5,
0x1753, 0x6, 0x176C, 0x5, 0x1770, 0x5, 0x1773, 0x6, 0x17B3, 0x5,
0x17B5, 0x10, 0x17B6, 0x8, 0x17BD, 0x6, 0x17C5, 0x8, 0x17C6, 0x6,
0x17C8, 0x8, 0x17D3, 0x6, 0x17D6, 0x18, 0x17D7, 0x4, 0x17DA, 0x18,
0x17DB, 0x1A, 0x17DC, 0x5, 0x17DD, 0x6, 0x17E9, 0x9, 0x17F9, 0xB,
0x1805, 0x18, 0x1806, 0x14, 0x180A, 0x18, 0x180D, 0x6, 0x180E, 0xC,
0x1819, 0x9, 0x1842, 0x5, 0x1843, 0x4, 0x1877, 0x5, 0x18A8, 0x5,
0x18AA, 0x605, 0x18F5, 0x5, 0x191C, 0x5, 0x1922, 0x6, 0x1926, 0x8,
0x1928, 0x6, 0x192B, 0x8, 0x1931, 0x8, 0x1932, 0x6, 0x1938, 0x8,
0x193B, 0x6, 0x1940, 0x1C, 0x1945, 0x18, 0x194F, 0x9, 0x196D, 0x5,
0x1974, 0x5, 0x19AB, 0x5, 0x19C0, 0x8, 0x19C7, 0x5, 0x19C9, 0x8,
0x19D9, 0x9, 0x19DA, 0xB, 0x19FF, 0x1C, 0x1A16, 0x5, 0x1A18, 0x6,
0x1A1B, 0x8, 0x1A1F, 0x18, 0x1A54, 0x5, 0x1A57, 0x806, 0x1A5E, 0x6,
0x1A62, 0x806, 0x1A64, 0x8, 0x1A6C, 0x6, 0x1A72, 0x8, 0x1A7C, 0x6,
0x1A7F, 0x6, 0x1A89, 0x9, 0x1A99, 0x9, 0x1AA6, 0x18, 0x1AA7, 0x4,
0x1AAD, 0x18, 0x1B03, 0x6, 0x1B04, 0x8, 0x1B33, 0x5, 0x1B35, 0x806,
0x1B3A, 0x6, 0x1B3C, 0x806, 0x1B41, 0x8, 0x1B42, 0x6, 0x1B44, 0x8,
0x1B4B, 0x5, 0x1B59, 0x9, 0x1B60, 0x18, 0x1B6A, 0x1C, 0x1B73, 0x6,
0x1B7C, 0x1C, 0x1B81, 0x6, 0x1B82, 0x8, 0x1BA0, 0x5, 0x1BA1, 0x8,
0x1BA5, 0x6, 0x1BA7, 0x8, 0x1BA9, 0x6, 0x1BAA, 0x8, 0x1BAF, 0x5,
0x1BB9, 0x9, 0x1BE5, 0x5, 0x1BE7, 0x806, 0x1BE9, 0x6, 0x1BEC, 0x8,
0x1BEE, 0x608, 0x1BF1, 0x6, 0x1BF3, 0x8, 0x1BFF, 0x18, 0x1C23, 0x5,
0x1C2B, 0x8, 0x1C33, 0x6, 0x1C35, 0x8, 0x1C37, 0x6, 0x1C3F, 0x18,
0x1C49, 0x9, 0x1C4F, 0x5, 0x1C59, 0x9, 0x1C77, 0x5, 0x1C7D, 0x4,
0x1C7F, 0x18, 0x1CD2, 0x6, 0x1CD3, 0x18, 0x1CE0, 0x6, 0x1CE1, 0x8,
0x1CE8, 0x6, 0x1CEC, 0x5, 0x1CED, 0x6, 0x1CF1, 0x5, 0x1CF2, 0x8,
0x1D2B, 0x2, 0x1D61, 0x4, 0x1D77, 0x2, 0x1D78, 0x4, 0x1D9A, 0x2,
0x1DBF, 0x4, 0x1DE6, 0x6, 0x1DFF, 0x6, 0x1E94, 0x201, 0x1E9D, 0x2,
0x1EFE, 0x201, 0x1F07, 0x2, 0x1F0F, 0x1, 0x1F15, 0x2, 0x1F1D, 0x1,
0x1F27, 0x2, 0x1F2F, 0x1, 0x1F37, 0x2, 0x1F3F, 0x1, 0x1F45, 0x2,
0x1F4D, 0x1, 0x1F57, 0x2, 0x1F59, 0x1, 0x1F5B, 0x1, 0x1F5D, 0x1,
0x1F5F, 0x1, 0x1F67, 0x2, 0x1F6F, 0x1, 0x1F7D, 0x2, 0x1F87, 0x2,
0x1F8F, 0x3, 0x1F97, 0x2, 0x1F9F, 0x3, 0x1FA7, 0x2, 0x1FAF, 0x3,
0x1FB4, 0x2, 0x1FB7, 0x2, 0x1FBB, 0x1, 0x1FBC, 0x3, 0x1FBD, 0x1B,
0x1FBE, 0x2, 0x1FC1, 0x1B, 0x1FC4, 0x2, 0x1FC7, 0x2, 0x1FCB, 0x1,
0x1FCC, 0x3, 0x1FCF, 0x1B, 0x1FD3, 0x2, 0x1FD7, 0x2, 0x1FDB, 0x1,
0x1FDF, 0x1B, 0x1FE7, 0x2, 0x1FEC, 0x1, 0x1FEF, 0x1B, 0x1FF4, 0x2,
0x1FF7, 0x2, 0x1FFB, 0x1, 0x1FFC, 0x3, 0x1FFE, 0x1B, 0x200A, 0xC,
0x200F, 0x10, 0x2015, 0x14, 0x2017, 0x18, 0x2018, 0x1D, 0x2019, 0x1E,
0x201A, 0x15, 0x201C, 0x1D, 0x201D, 0x1E, 0x201E, 0x15, 0x201F, 0x1D,
0x2027, 0x18, 0x2029, 0xE0D, 0x202E, 0x10, 0x202F, 0xC, 0x2038, 0x18,
0x203A, 0x1D1E, 0x203E, 0x18, 0x2040, 0x17, 0x2043, 0x18, 0x2044, 0x19,
0x2045, 0x15, 0x2046, 0x16, 0x2051, 0x18, 0x2052, 0x19, 0x2053, 0x18,
0x2054, 0x17, 0x205E, 0x18, 0x205F, 0xC, 0x2064, 0x10, 0x206F, 0x10,
0x2071, 0x40B, 0x2079, 0xB, 0x207C, 0x19, 0x207D, 0x15, 0x207E, 0x16,
0x207F, 0x4, 0x2089, 0xB, 0x208C, 0x19, 0x208E, 0x1516, 0x209C, 0x4,
0x20B9, 0x1A, 0x20DC, 0x6, 0x20E0, 0x7, 0x20E1, 0x6, 0x20E4, 0x7,
0x20F0, 0x6, 0x2101, 0x1C, 0x2102, 0x1, 0x2106, 0x1C, 0x2107, 0x1,
0x2109, 0x1C, 0x210A, 0x2, 0x210D, 0x1, 0x210F, 0x2, 0x2112, 0x1,
0x2113, 0x2, 0x2114, 0x1C, 0x2115, 0x1, 0x2117, 0x1C, 0x2118, 0x19,
0x211D, 0x1, 0x2123, 0x1C, 0x2129, 0x1C01, 0x212D, 0x1, 0x212F, 0x21C,
0x2133, 0x1, 0x2134, 0x2, 0x2138, 0x5, 0x2139, 0x2, 0x213B, 0x1C,
0x213D, 0x2, 0x213F, 0x1, 0x2144, 0x19, 0x2145, 0x1, 0x2149, 0x2,
0x214B, 0x191C, 0x214D, 0x1C, 0x214F, 0x1C02, 0x215F, 0xB, 0x2182, 0xA,
0x2184, 0x102, 0x2188, 0xA, 0x2189, 0xB, 0x2194, 0x19, 0x2199, 0x1C,
0x219B, 0x19, 0x219F, 0x1C, 0x21A0, 0x19, 0x21A2, 0x1C, 0x21A3, 0x19,
0x21A5, 0x1C, 0x21A6, 0x19, 0x21AD, 0x1C, 0x21AE, 0x19, 0x21CD, 0x1C,
0x21CF, 0x19, 0x21D1, 0x1C, 0x21D4, 0x1C19, 0x21F3, 0x1C, 0x22FF, 0x19,
0x2307, 0x1C, 0x230B, 0x19, 0x231F, 0x1C, 0x2321, 0x19, 0x2328, 0x1C,
0x232A, 0x1516, 0x237B, 0x1C, 0x237C, 0x19, 0x239A, 0x1C, 0x23B3, 0x19,
0x23DB, 0x1C, 0x23E1, 0x19, 0x23F3, 0x1C, 0x2426, 0x1C, 0x244A, 0x1C,
0x249B, 0xB, 0x24E9, 0x1C, 0x24FF, 0xB, 0x25B6, 0x1C, 0x25B7, 0x19,
0x25C0, 0x1C, 0x25C1, 0x19, 0x25F7, 0x1C, 0x25FF, 0x19, 0x266E, 0x1C,
0x266F, 0x19, 0x26FF, 0x1C, 0x2767, 0x1C, 0x2775, 0x1615, 0x2793, 0xB,
0x27BF, 0x1C, 0x27C4, 0x19, 0x27C6, 0x1516, 0x27CA, 0x19, 0x27CC, 0x19,
0x27E5, 0x19, 0x27EF, 0x1615, 0x27FF, 0x19, 0x28FF, 0x1C, 0x2982, 0x19,
0x2998, 0x1516, 0x29D7, 0x19, 0x29DB, 0x1615, 0x29FB, 0x19, 0x29FD, 0x1615,
0x2AFF, 0x19, 0x2B2F, 0x1C, 0x2B44, 0x19, 0x2B46, 0x1C, 0x2B4C, 0x19,
0x2B59, 0x1C, 0x2C2E, 0x1, 0x2C5E, 0x2, 0x2C61, 0x201, 0x2C64, 0x1,
0x2C66, 0x2, 0x2C6C, 0x102, 0x2C70, 0x1, 0x2C72, 0x201, 0x2C74, 0x2,
0x2C75, 0x1, 0x2C7C, 0x2, 0x2C7D, 0x4, 0x2C80, 0x1, 0x2CE2, 0x201,
0x2CE4, 0x2, 0x2CEA, 0x1C, 0x2CEE, 0x102, 0x2CF1, 0x6, 0x2CFC, 0x18,
0x2CFD, 0xB, 0x2CFF, 0x18, 0x2D25, 0x2, 0x2D65, 0x5, 0x2D70, 0x418,
0x2D7F, 0x6, 0x2D96, 0x5, 0x2DA6, 0x5, 0x2DAE, 0x5, 0x2DB6, 0x5,
0x2DBE, 0x5, 0x2DC6, 0x5, 0x2DCE, 0x5, 0x2DD6, 0x5, 0x2DDE, 0x5,
0x2DFF, 0x6, 0x2E01, 0x18, 0x2E05, 0x1E1D, 0x2E08, 0x18, 0x2E09, 0x1D,
0x2E0A, 0x1E, 0x2E0B, 0x18, 0x2E0C, 0x1D, 0x2E0D, 0x1E, 0x2E16, 0x18,
0x2E17, 0x14, 0x2E19, 0x18, 0x2E1A, 0x14, 0x2E1B, 0x18, 0x2E1C, 0x1D,
0x2E1D, 0x1E, 0x2E1F, 0x18, 0x2E20, 0x1D, 0x2E21, 0x1E, 0x2E22, 0x15,
0x2E23, 0x16, 0x2E24, 0x15, 0x2E25, 0x16, 0x2E26, 0x15, 0x2E27, 0x16,
0x2E28, 0x15, 0x2E29, 0x16, 0x2E2E, 0x18, 0x2E2F, 0x4, 0x2E31, 0x18,
0x2E99, 0x1C, 0x2EF3, 0x1C, 0x2FD5, 0x1C, 0x2FFB, 0x1C, 0x3000, 0xC,
0x3003, 0x18, 0x3004, 0x1C, 0x3005, 0x4, 0x3006, 0x5, 0x3007, 0xA,
0x3008, 0x15, 0x3009, 0x16, 0x300A, 0x15, 0x300B, 0x16, 0x300C, 0x15,
0x300D, 0x16, 0x300E, 0x15, 0x300F, 0x16, 0x3010, 0x15, 0x3011, 0x16,
0x3013, 0x1C, 0x3014, 0x15, 0x3015, 0x16, 0x3016, 0x15, 0x3017, 0x16,
0x3018, 0x15, 0x3019, 0x16, 0x301A, 0x15, 0x301B, 0x16, 0x301C, 0x14,
0x301D, 0x15, 0x301F, 0x16, 0x3020, 0x1C, 0x3029, 0xA, 0x302F, 0x6,
0x3030, 0x14, 0x3035, 0x4, 0x3037, 0x1C, 0x303A, 0xA, 0x303B, 0x4,
0x303C, 0x5, 0x303D, 0x18, 0x303F, 0x1C, 0x3096, 0x5, 0x309A, 0x6,
0x309C, 0x1B, 0x309E, 0x4, 0x30A0, 0x514, 0x30FA, 0x5, 0x30FB, 0x18,
0x30FE, 0x4, 0x30FF, 0x5, 0x312D, 0x5, 0x318E, 0x5, 0x3191, 0x1C,
0x3195, 0xB, 0x319F, 0x1C, 0x31BA, 0x5, 0x31E3, 0x1C, 0x31FF, 0x5,
0x321E, 0x1C, 0x3229, 0xB, 0x3250, 0x1C, 0x325F, 0xB, 0x327F, 0x1C,
0x3289, 0xB, 0x32B0, 0x1C, 0x32BF, 0xB, 0x32FE, 0x1C, 0x33FF, 0x1C,
0x4DB5, 0x5, 0x4DFF, 0x1C, 0x9FCB, 0x5, 0xA014, 0x5, 0xA015, 0x4,
0xA48C, 0x5, 0xA4C6, 0x1C, 0xA4F7, 0x5, 0xA4FD, 0x4, 0xA4FF, 0x18,
0xA60B, 0x5, 0xA60C, 0x4, 0xA60F, 0x18, 0xA61F, 0x5, 0xA629, 0x9,
0xA62B, 0x5, 0xA640, 0x1, 0xA641, 0x2, 0xA642, 0x1, 0xA643, 0x2,
0xA644, 0x1, 0xA645, 0x2, 0xA646, 0x1, 0xA647, 0x2, 0xA648, 0x1,
0xA649, 0x2, 0xA64A, 0x1, 0xA64B, 0x2, 0xA64C, 0x1, 0xA64D, 0x2,
0xA64E, 0x1, 0xA64F, 0x2, 0xA650, 0x1, 0xA651, 0x2, 0xA652, 0x1,
0xA653, 0x2, 0xA654, 0x1, 0xA655, 0x2, 0xA656, 0x1, 0xA657, 0x2,
0xA658, 0x1, 0xA659, 0x2, 0xA65A, 0x1, 0xA65B, 0x2, 0xA65C, 0x1,
0xA65D, 0x2, 0xA65E, 0x1, 0xA65F, 0x2, 0xA660, 0x1, 0xA661, 0x2,
0xA662, 0x1, 0xA663, 0x2, 0xA664, 0x1, 0xA665, 0x2, 0xA666, 0x1,
0xA667, 0x2, 0xA668, 0x1, 0xA669, 0x2, 0xA66A, 0x1, 0xA66B, 0x2,
0xA66C, 0x1, 0xA66D, 0x2, 0xA66E, 0x5, 0xA66F, 0x6, 0xA672, 0x7,
0xA673, 0x18, 0xA67D, 0x6, 0xA67E, 0x18, 0xA67F, 0x4, 0xA680, 0x1,
0xA681, 0x2, 0xA682, 0x1, 0xA683, 0x2, 0xA684, 0x1, 0xA685, 0x2,
0xA686, 0x1, 0xA687, 0x2, 0xA688, 0x1, 0xA689, 0x2, 0xA68A, 0x1,
0xA68B, 0x2, 0xA68C, 0x1, 0xA68D, 0x2, 0xA68E, 0x1, 0xA68F, 0x2,
0xA690, 0x1, 0xA691, 0x2, 0xA692, 0x1, 0xA693, 0x2, 0xA694, 0x1,
0xA695, 0x2, 0xA696, 0x1, 0xA697, 0x2, 0xA6E5, 0x5, 0xA6EF, 0xA,
0xA6F1, 0x6, 0xA6F7, 0x18, 0xA716, 0x1B, 0xA71F, 0x4, 0xA721, 0x1B,
0xA72E, 0x201, 0xA731, 0x2, 0xA732, 0x1, 0xA733, 0x2, 0xA734, 0x1,
0xA735, 0x2, 0xA736, 0x1, 0xA737, 0x2, 0xA738, 0x1, 0xA739, 0x2,
0xA73A, 0x1, 0xA73B, 0x2, 0xA73C, 0x1, 0xA73D, 0x2, 0xA73E, 0x1,
0xA73F, 0x2, 0xA740, 0x1, 0xA741, 0x2, 0xA742, 0x1, 0xA743, 0x2,
0xA744, 0x1, 0xA745, 0x2, 0xA746, 0x1, 0xA747, 0x2, 0xA748, 0x1,
0xA749, 0x2, 0xA74A, 0x1, 0xA74B, 0x2, 0xA74C, 0x1, 0xA74D, 0x2,
0xA74E, 0x1, 0xA74F, 0x2, 0xA750, 0x1, 0xA751, 0x2, 0xA752, 0x1,
0xA753, 0x2, 0xA754, 0x1, 0xA755, 0x2, 0xA756, 0x1, 0xA757, 0x2,
0xA758, 0x1, 0xA759, 0x2, 0xA75A, 0x1, 0xA75B, 0x2, 0xA75C, 0x1,
0xA75D, 0x2, 0xA75E, 0x1, 0xA75F, 0x2, 0xA760, 0x1, 0xA761, 0x2,
0xA762, 0x1, 0xA763, 0x2, 0xA764, 0x1, 0xA765, 0x2, 0xA766, 0x1,
0xA767, 0x2, 0xA768, 0x1, 0xA769, 0x2, 0xA76A, 0x1, 0xA76B, 0x2,
0xA76C, 0x1, 0xA76D, 0x2, 0xA76E, 0x1, 0xA76F, 0x2, 0xA770, 0x4,
0xA778, 0x2, 0xA77C, 0x102, 0xA77E, 0x1, 0xA77F, 0x2, 0xA780, 0x1,
0xA781, 0x2, 0xA782, 0x1, 0xA783, 0x2, 0xA784, 0x1, 0xA785, 0x2,
0xA786, 0x1, 0xA787, 0x2, 0xA788, 0x4, 0xA78A, 0x1B, 0xA78E, 0x102,
0xA791, 0x201, 0xA7A9, 0x201, 0xA7FA, 0x2, 0xA801, 0x5, 0xA802, 0x6,
0xA805, 0x5, 0xA806, 0x6, 0xA80A, 0x5, 0xA80B, 0x6, 0xA822, 0x5,
0xA824, 0x8, 0xA826, 0x6, 0xA827, 0x8, 0xA82B, 0x1C, 0xA835, 0xB,
0xA837, 0x1C, 0xA839, 0x1C1A, 0xA873, 0x5, 0xA877, 0x18, 0xA881, 0x8,
0xA8B3, 0x5, 0xA8C3, 0x8, 0xA8C4, 0x6, 0xA8CF, 0x18, 0xA8D9, 0x9,
0xA8F1, 0x6, 0xA8F7, 0x5, 0xA8FA, 0x18, 0xA8FB, 0x5, 0xA909, 0x9,
0xA925, 0x5, 0xA92D, 0x6, 0xA92F, 0x18, 0xA946, 0x5, 0xA951, 0x6,
0xA953, 0x8, 0xA95F, 0x18, 0xA97C, 0x5, 0xA982, 0x6, 0xA983, 0x8,
0xA9B2, 0x5, 0xA9B3, 0x6, 0xA9B5, 0x8, 0xA9B9, 0x6, 0xA9BB, 0x8,
0xA9BC, 0x6, 0xA9C0, 0x8, 0xA9CD, 0x18, 0xA9CF, 0x4, 0xA9D9, 0x9,
0xA9DF, 0x18, 0xAA28, 0x5, 0xAA2E, 0x6, 0xAA30, 0x8, 0xAA32, 0x6,
0xAA34, 0x8, 0xAA36, 0x6, 0xAA42, 0x5, 0xAA43, 0x6, 0xAA4B, 0x5,
0xAA4D, 0x806, 0xAA59, 0x9, 0xAA5F, 0x18, 0xAA6F, 0x5, 0xAA70, 0x4,
0xAA76, 0x5, 0xAA79, 0x1C, 0xAA7B, 0x805, 0xAAAF, 0x5, 0xAAB1, 0x506,
0xAAB4, 0x6, 0xAAB6, 0x5, 0xAAB8, 0x6, 0xAABD, 0x5, 0xAABF, 0x6,
0xAAC2, 0x605, 0xAADC, 0x5, 0xAADD, 0x4, 0xAADF, 0x18, 0xAB06, 0x5,
0xAB0E, 0x5, 0xAB16, 0x5, 0xAB26, 0x5, 0xAB2E, 0x5, 0xABE2, 0x5,
0xABE4, 0x8, 0xABE5, 0x6, 0xABE7, 0x8, 0xABE8, 0x6, 0xABEA, 0x8,
0xABEB, 0x18, 0xABEC, 0x8, 0xABED, 0x6, 0xABF9, 0x9, 0xD7A3, 0x5,
0xD7C6, 0x5, 0xD7FB, 0x5, 0xDFFF, 0x13, 0xF8FF, 0x12, 0xFA2D, 0x5,
0xFA6D, 0x5, 0xFAD9, 0x5, 0xFB06, 0x2, 0xFB17, 0x2, 0xFB1E, 0x506,
0xFB28, 0x5, 0xFB29, 0x19, 0xFB36, 0x5, 0xFB3C, 0x5, 0xFB3E, 0x5,
0xFB41, 0x5, 0xFB44, 0x5, 0xFBB1, 0x5, 0xFBC1, 0x1B, 0xFD3D, 0x5,
0xFD3F, 0x1615, 0xFD8F, 0x5, 0xFDC7, 0x5, 0xFDFB, 0x5, 0xFDFD, 0x1C1A,
0xFE0F, 0x6, 0xFE16, 0x18, 0xFE17, 0x15, 0xFE18, 0x16, 0xFE19, 0x18,
0xFE26, 0x6, 0xFE30, 0x18, 0xFE32, 0x14, 0xFE34, 0x17, 0xFE44, 0x1516,
0xFE46, 0x18, 0xFE48, 0x1516, 0xFE4C, 0x18, 0xFE4F, 0x17, 0xFE52, 0x18,
0xFE57, 0x18, 0xFE58, 0x14, 0xFE59, 0x15, 0xFE5A, 0x16, 0xFE5B, 0x15,
0xFE5C, 0x16, 0xFE5D, 0x15, 0xFE5E, 0x16, 0xFE61, 0x18, 0xFE63, 0x1419,
0xFE66, 0x19, 0xFE69, 0x1A18, 0xFE6B, 0x18, 0xFE74, 0x5, 0xFEFC, 0x5,
0xFEFF, 0x10, 0xFF03, 0x18, 0xFF04, 0x1A, 0xFF07, 0x18, 0xFF08, 0x15,
0xFF09, 0x16, 0xFF0A, 0x18, 0xFF0B, 0x19, 0xFF0C, 0x18, 0xFF0D, 0x14,
0xFF0F, 0x18, 0xFF19, 0x9, 0xFF1B, 0x18, 0xFF1E, 0x19, 0xFF20, 0x18,
0xFF3A, 0x1, 0xFF3B, 0x15, 0xFF3C, 0x18, 0xFF3D, 0x16, 0xFF3E, 0x1B,
0xFF3F, 0x17, 0xFF40, 0x1B, 0xFF5A, 0x2, 0xFF5B, 0x15, 0xFF5C, 0x19,
0xFF5D, 0x16, 0xFF5E, 0x19, 0xFF5F, 0x15, 0xFF60, 0x16, 0xFF61, 0x18,
0xFF62, 0x15, 0xFF63, 0x16, 0xFF65, 0x18, 0xFF6F, 0x5, 0xFF70, 0x4,
0xFF9D, 0x5, 0xFF9F, 0x4, 0xFFBE, 0x5, 0xFFC7, 0x5, 0xFFCF, 0x5,
0xFFD7, 0x5, 0xFFDC, 0x5, 0xFFE1, 0x1A, 0xFFE2, 0x19, 0xFFE3, 0x1B,
0xFFE4, 0x1C, 0xFFE6, 0x1A, 0xFFE8, 0x1C, 0xFFEC, 0x19, 0xFFEE, 0x1C,
0xFFFB, 0x10, 0xFFFD, 0x1C
} };

static const std::array<uint16_t, 1000 - 0xC0> kLowerCaseCache = { {
0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00D7,
0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00DF,
0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF,
0x0101, 0x0101, 0x0103, 0x0103, 0x0105, 0x0105, 0x0107, 0x0107,
0x0109, 0x0109, 0x010B, 0x010B, 0x010D, 0x010D, 0x010F, 0x010F,
0x0111, 0x0111, 0x0113, 0x0113, 0x0115, 0x0115, 0x0117, 0x0117,
0x0119, 0x0119, 0x011B, 0x011B, 0x011D, 0x011D, 0x011F, 0x011F,
0x0121, 0x0121, 0x0123, 0x0123, 0x0125, 0x0125, 0x0127, 0x0127,
0x0129, 0x0129, 0x012B, 0x012B, 0x012D, 0x012D, 0x012F, 0x012F,
0x0069, 0x0131, 0x0133, 0x0133, 0x0135, 0x0135, 0x0137, 0x0137,
0x0138, 0x013A, 0x013A, 0x013C, 0x013C, 0x013E, 0x013E, 0x0140,
0x0140, 0x0142, 0x0142, 0x0144, 0x0144, 0x0146, 0x0146, 0x0148,
0x0148, 0x0149, 0x014B, 0x014B, 0x014D, 0x014D, 0x014F, 0x014F,
0x0151, 0x0151, 0x0153, 0x0153, 0x0155, 0x0155, 0x0157, 0x0157,
0x0159, 0x0159, 0x015B, 0x015B, 0x015D, 0x015D, 0x015F, 0x015F,
0x0161, 0x0161, 0x0163, 0x0163, 0x0165, 0x0165, 0x0167, 0x0167,
0x0169, 0x0169, 0x016B, 0x016B, 0x016D, 0x016D, 0x016F, 0x016F,
0x0171, 0x0171, 0x0173, 0x0173, 0x0175, 0x0175, 0x0177, 0x0177,
0x00FF, 0x017A, 0x017A, 0x017C, 0x017C, 0x017E, 0x017E, 0x017F,
0x0180, 0x0253, 0x0183, 0x0183, 0x0185, 0x0185, 0x0254, 0x0188,
0x0188, 0x0256, 0x0257, 0x018C, 0x018C, 0x018D, 0x01DD, 0x0259,
0x025B, 0x0192, 0x0192, 0x0260, 0x0263, 0x0195, 0x0269, 0x0268,
0x0199, 0x0199, 0x019A, 0x019B, 0x026F, 0x0272, 0x019E, 0x0275,
0x01A1, 0x01A1, 0x01A3, 0x01A3, 0x01A5, 0x01A5, 0x0280, 0x01A8,
0x01A8, 0x0283, 0x01AA, 0x01AB, 0x01AD, 0x01AD, 0x0288, 0x01B0,
0x01B0, 0x028A, 0x028B, 0x01B4, 0x01B4, 0x01B6, 0x01B6, 0x0292,
0x01B9, 0x01B9, 0x01BA, 0x01BB, 0x01BD, 0x01BD, 0x01BE, 0x01BF,
0x01C0, 0x01C1, 0x01C2, 0x01C3, 0x01C6, 0x01C6, 0x01C6, 0x01C9,
0x01C9, 0x01C9, 0x01CC, 0x01CC, 0x01CC, 0x01CE, 0x01CE, 0x01D0,
0x01D0, 0x01D2, 0x01D2, 0x01D4, 0x01D4, 0x01D6, 0x01D6, 0x01D8,
0x01D8, 0x01DA, 0x01DA, 0x01DC, 0x01DC, 0x01DD, 0x01DF, 0x01DF,
0x01E1, 0x01E1, 0x01E3, 0x01E3, 0x01E5, 0x01E5, 0x01E7, 0x01E7,
0x01E9, 0x01E9, 0x01EB, 0x01EB, 0x01ED, 0x01ED, 0x01EF, 0x01EF,
0x01F0, 0x01F3, 0x01F3, 0x01F3, 0x01F5, 0x01F5, 0x0195, 0x01BF,
0x01F9, 0x01F9, 0x01FB, 0x01FB, 0x01FD, 0x01FD, 0x01FF, 0x01FF,
0x0201, 0x0201, 0x0203, 0x0203, 0x0205, 0x0205, 0x0207, 0x0207,
0x0209, 0x0209, 0x020B, 0x020B, 0x020D, 0x020D, 0x020F, 0x020F,
0x0211, 0x0211, 0x0213, 0x0213, 0x0215, 0x0215, 0x0217, 0x0217,
0x0219, 0x0219, 0x021B, 0x021B, 0x021D, 0x021D, 0x021F, 0x021F,
0x019E, 0x0221, 0x0223, 0x0223, 0x0225, 0x0225, 0x0227, 0x0227,
0x0229, 0x0229, 0x022B, 0x022B, 0x022D, 0x022D, 0x022F, 0x022F,
0x0231, 0x0231, 0x0233, 0x0233, 0x0234, 0x0235, 0x0236, 0x0237,
0x0238, 0x0239, 0x2C65, 0x023C, 0x023C, 0x019A, 0x2C66, 0x023F,
0x0240, 0x0242, 0x0242, 0x0180, 0x0289, 0x028C, 0x0247, 0x0247,
0x0249, 0x0249, 0x024B, 0x024B, 0x024D, 0x024D, 0x024F, 0x024F,
0x0250, 0x0251, 0x0252, 0x0253, 0x0254, 0x0255, 0x0256, 0x0257,
0x0258, 0x0259, 0x025A, 0x025B, 0x025C, 0x025D, 0x025E, 0x025F,
0x0260, 0x0261, 0x0262, 0x0263, 0x0264, 0x0265, 0x0266, 0x0267,
0x0268, 0x0269, 0x026A, 0x026B, 0x026C, 0x026D, 0x026E, 0x026F,
0x0270, 0x0271, 0x0272, 0x0273, 0x0274, 0x0275, 0x0276, 0x0277,
0x0278, 0x0279, 0x027A, 0x027B, 0x027C, 0x027D, 0x027E, 0x027F,
0x0280, 0x0281, 0x0282, 0x0283, 0x0284, 0x0285, 0x0286, 0x0287,
0x0288, 0x0289, 0x028A, 0x028B, 0x028C, 0x028D, 0x028E, 0x028F,
0x0290, 0x0291, 0x0292, 0x0293, 0x0294, 0x0295, 0x0296, 0x0297,
0x0298, 0x0299, 0x029A, 0x029B, 0x029C, 0x029D, 0x029E, 0x029F,
0x02A0, 0x02A1, 0x02A2, 0x02A3, 0x02A4, 0x02A5, 0x02A6, 0x02A7,
0x02A8, 0x02A9, 0x02AA, 0x02AB, 0x02AC, 0x02AD, 0x02AE, 0x02AF,
0x02B0, 0x02B1, 0x02B2, 0x02B3, 0x02B4, 0x02B5, 0x02B6, 0x02B7,
0x02B8, 0x02B9, 0x02BA, 0x02BB, 0x02BC, 0x02BD, 0x02BE, 0x02BF,
0x02C0, 0x02C1, 0x02C2, 0x02C3, 0x02C4, 0x02C5, 0x02C6, 0x02C7,
0x02C8, 0x02C9, 0x02CA, 0x02CB, 0x02CC, 0x02CD, 0x02CE, 0x02CF,
0x02D0, 0x02D1, 0x02D2, 0x02D3, 0x02D4, 0x02D5, 0x02D6, 0x02D7,
0x02D8, 0x02D9, 0x02DA, 0x02DB, 0x02DC, 0x02DD, 0x02DE, 0x02DF,
0x02E0, 0x02E1, 0x02E2, 0x02E3, 0x02E4, 0x02E5, 0x02E6, 0x02E7,
0x02E8, 0x02E9, 0x02EA, 0x02EB, 0x02EC, 0x02ED, 0x02EE, 0x02EF,
0x02F0, 0x02F1, 0x02F2, 0x02F3, 0x02F4, 0x02F5, 0x02F6, 0x02F7,
0x02F8, 0x02F9, 0x02FA, 0x02FB, 0x02FC, 0x02FD, 0x02FE, 0x02FF,
0x0300, 0x0301, 0x0302, 0x0303, 0x0304, 0x0305, 0x0306, 0x0307,
0x0308, 0x0309, 0x030A, 0x030B, 0x030C, 0x030D, 0x030E, 0x030F,
0x0310, 0x0311, 0x0312, 0x0313, 0x0314, 0x0315, 0x0316, 0x0317,
0x0318, 0x0319, 0x031A, 0x031B, 0x031C, 0x031D, 0x031E, 0x031F,
0x0320, 0x0321, 0x0322, 0x0323, 0x0324, 0x0325, 0x0326, 0x0327,
0x0328, 0x0329, 0x032A, 0x032B, 0x032C, 0x032D, 0x032E, 0x032F,
0x0330, 0x0331, 0x0332, 0x0333, 0x0334, 0x0335, 0x0336, 0x0337,
0x0338, 0x0339, 0x033A, 0x033B, 0x033C, 0x033D, 0x033E, 0x033F,
0x0340, 0x0341, 0x0342, 0x0343, 0x0344, 0x0345, 0x0346, 0x0347,
0x0348, 0x0349, 0x034A, 0x034B, 0x034C, 0x034D, 0x034E, 0x034F,
0x0350, 0x0351, 0x0352, 0x0353, 0x0354, 0x0355, 0x0356, 0x0357,
0x0358, 0x0359, 0x035A, 0x035B, 0x035C, 0x035D, 0x035E, 0x035F,
0x0360, 0x0361, 0x0362, 0x0363, 0x0364, 0x0365, 0x0366, 0x0367,
0x0368, 0x0369, 0x036A, 0x036B, 0x036C, 0x036D, 0x036E, 0x036F,
0x0371, 0x0371, 0x0373, 0x0373, 0x0374, 0x0375, 0x0377, 0x0377,
0x0378, 0x0379, 0x037A, 0x037B, 0x037C, 0x037D, 0x037E, 0x037F,
0x0380, 0x0381, 0x0382, 0x0383, 0x0384, 0x0385, 0x03AC, 0x0387,
0x03AD, 0x03AE, 0x03AF, 0x038B, 0x03CC, 0x038D, 0x03CD, 0x03CE,
0x0390, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7,
0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
0x03C0, 0x03C1, 0x03A2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7,
0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7,
0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7,
0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0x03D7,
0x03D0, 0x03D1, 0x03D2, 0x03D3, 0x03D4, 0x03D5, 0x03D6, 0x03D7,
0x03D9, 0x03D9, 0x03DB, 0x03DB, 0x03DD, 0x03DD, 0x03DF, 0x03DF,
0x03E1, 0x03E1, 0x03E3, 0x03E3, 0x03E5, 0x03E5, 0x03E7, 0x03E7
} };

static const std::array<uint16_t, 151> kLowerCaseKeys = { {
0x0041, 0x00C0, 0x00D8, 0x0100, 0x0130, 0x0132, 0x0139, 0x014A,
0x0178, 0x0179, 0x0181, 0x0182, 0x0186, 0x0187, 0x0189, 0x018B,
0x018E, 0x018F, 0x0190, 0x0191, 0x0193, 0x0194, 0x0196, 0x0197,
0x0198, 0x019C, 0x019D, 0x019F, 0x01A0, 0x01A6, 0x01A7, 0x01A9,
0x01AC, 0x01AE, 0x01AF, 0x01B1, 0x01B3, 0x01B7, 0x01B8, 0x01BC,
0x01C4, 0x01C5, 0x01C7, 0x01C8, 0x01CA, 0x01CB, 0x01DE, 0x01F1,
0x01F2, 0x01F6, 0x01F7, 0x01F8, 0x0220, 0x0222, 0x023A, 0x023B,
0x023D, 0x023E, 0x0241, 0x0243, 0x0244, 0x0245, 0x0246, 0x0370,
0x0376, 0x0386, 0x0388, 0x038C, 0x038E, 0x0391, 0x03A3, 0x03CF,
0x03D8, 0x03F4, 0x03F7, 0x03F9, 0x03FA, 0x03FD, 0x0400, 0x0410,
0x0460, 0x048A, 0x04C0, 0x04C1, 0x04D0, 0x0531, 0x10A0, 0x10C7,
0x10CD, 0x1E00, 0x1E9E, 0x1EA0, 0x1F08, 0x1F18, 0x1F28, 0x1F38,
0x1F48, 0x1F59, 0x1F68, 0x1F88, 0x1F98, 0x1FA8, 0x1FB8, 0x1FBA,
0x1FBC, 0x1FC8, 0x1FCC, 0x1FD8, 0x1FDA, 0x1FE8, 0x1FEA, 0x1FEC,
0x1FF8, 0x1FFA, 0x1FFC, 0x2126, 0x212A, 0x212B, 0x2132, 0x2160,
0x2183, 0x24B6, 0x2C00, 0x2C60, 0x2C62, 0x2C63, 0x2C64, 0x2C67,
0x2C6D, 0x2C6E, 0x2C6F, 0x2C70, 0x2C72, 0x2C75, 0x2C7E, 0x2C80,
0x2CEB, 0x2CF2, 0xA640, 0xA680, 0xA722, 0xA732, 0xA779, 0xA77D,
0xA77E, 0xA78B, 0xA78D, 0xA790, 0xA7A0, 0xA7AA, 0xFF21
} };

static const std::array<uint16_t, 302> kLowerCaseValues = { {
0x005A, 0x0020, 0x00D6, 0x0020, 0x00DE, 0x0020, 0x812E, 0x0001,
0x8130, 0xFF39, 0x8136, 0x0001, 0x8147, 0x0001, 0x8176, 0x0001,
0x0178, 0xFF87, 0x817D, 0x0001, 0x0181, 0x00D2, 0x8184, 0x0001,
0x0186, 0x00CE, 0x8187, 0x0001, 0x018A, 0x00CD, 0x018B, 0x0001,
0x018E, 0x004F, 0x018F, 0x00CA, 0x0190, 0x00CB, 0x8191, 0x0001,
0x0193, 0x00CD, 0x8194, 0x00CF, 0x0196, 0x00D3, 0x0197, 0x00D1,
0x0198, 0x0001, 0x019C, 0x00D3, 0x819D, 0x00D5, 0x019F, 0x00D6,
0x81A4, 0x0001, 0x01A6, 0x00DA, 0x81A7, 0x0001, 0x01A9, 0x00DA,
0x81AC, 0x0001, 0x01AE, 0x00DA, 0x81AF, 0x0001, 0x01B2, 0x00D9,
0x81B5, 0x0001, 0x01B7, 0x00DB, 0x01B8, 0x0001, 0x01BC, 0x0001,
0x01C4, 0x0002, 0x81C5, 0x0001, 0x01C7, 0x0002, 0x81C8, 0x0001,
0x01CA, 0x0002, 0x81DB, 0x0001, 0x81EE, 0x0001, 0x01F1, 0x0002,
0x81F4, 0x0001, 0x01F6, 0xFF9F, 0x01F7, 0xFFC8, 0x821E, 0x0001,
0x8220, 0xFF7E, 0x8232, 0x0001, 0x023A, 0x2A2B, 0x823B, 0x0001,
0x023D, 0xFF5D, 0x023E, 0x2A28, 0x8241, 0x0001, 0x0243, 0xFF3D,
0x0244, 0x0045, 0x0245, 0x0047, 0x824E, 0x0001, 0x8372, 0x0001,
0x0376, 0x0001, 0x8386, 0x0026, 0x038A, 0x0025, 0x838C, 0x0040,
0x038F, 0x003F, 0x03A1, 0x0020, 0x03AB, 0x0020, 0x03CF, 0x0008,
0x83EE, 0x0001, 0x03F4, 0xFFC4, 0x83F7, 0x0001, 0x03F9, 0xFFF9,
0x03FA, 0x0001, 0x03FF, 0xFF7E, 0x040F, 0x0050, 0x042F, 0x0020,
0x8480, 0x0001, 0x84BE, 0x0001, 0x04C0, 0x000F, 0x84CD, 0x0001,
0x8526, 0x0001, 0x0556, 0x0030, 0x10C5, 0x1C60, 0x10C7, 0x1C60,
0x10CD, 0x1C60, 0x9E94, 0x0001, 0x9E9E, 0xE241, 0x9EFE, 0x0001,
0x1F0F, 0xFFF8, 0x1F1D, 0xFFF8, 0x1F2F, 0xFFF8, 0x1F3F, 0xFFF8,
0x1F4D, 0xFFF8, 0x9F5F, 0xFFF8, 0x1F6F, 0xFFF8, 0x1F8F, 0xFFF8,
0x1F9F, 0xFFF8, 0x1FAF, 0xFFF8, 0x1FB9, 0xFFF8, 0x1FBB, 0xFFB6,
0x1FBC, 0xFFF7, 0x1FCB, 0xFFAA, 0x1FCC, 0xFFF7, 0x1FD9, 0xFFF8,
0x1FDB, 0xFF9C, 0x1FE9, 0xFFF8, 0x1FEB, 0xFF90, 0x1FEC, 0xFFF9,
0x1FF9, 0xFF80, 0x1FFB, 0xFF82, 0x1FFC, 0xFFF7, 0x2126, 0xE2A3,
0x212A, 0xDF41, 0x212B, 0xDFBA, 0x2132, 0x001C, 0x216F, 0x0010,
0x2183, 0x0001, 0x24CF, 0x001A, 0x2C2E, 0x0030, 0xAC60, 0x0001,
0x2C62, 0xD609, 0x2C63, 0xF11A, 0x2C64, 0xD619, 0xAC6B, 0x0001,
0x2C6D, 0xD5E4, 0x2C6E, 0xD603, 0x2C6F, 0xD5E1, 0xAC70, 0xD5E2,
0x2C72, 0x0001, 0x2C75, 0x0001, 0x2C7F, 0xD5C1, 0xACE2, 0x0001,
0xACED, 0x0001, 0x2CF2, 0x0001, 0x266C, 0x0001, 0x2696, 0x0001,
0x272E, 0x0001, 0x276E, 0x0001, 0x277B, 0x0001, 0xA77D, 0x75FC,
0x2786, 0x0001, 0x278B, 0x0001, 0xA78D, 0x5AD8, 0x2792, 0x0001,
0x27A8, 0x0001, 0xA7AA, 0x5ABC, 0xFF3A, 0x0020
} };

static const std::array<uint16_t, 1000 - 0xB5> kUpperCaseCache = { {
0x039C, 0x00B6, 0x00B7, 0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC,
0x00BD, 0x00BE, 0x00BF, 0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4,
0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC,
0x00CD, 0x00CE, 0x00CF, 0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4,
0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC,
0x00DD, 0x00DE, 0x00DF, 0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4,
0x00C5, 0x00C6, 0x00C7, 0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC,
0x00CD, 0x00CE, 0x00CF, 0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4,
0x00D5, 0x00D6, 0x00F7, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC,
0x00DD, 0x00DE, 0x0178, 0x0100, 0x0100, 0x0102, 0x0102, 0x0104,
0x0104, 0x0106, 0x0106, 0x0108, 0x0108, 0x010A, 0x010A, 0x010C,
0x010C, 0x010E, 0x010E, 0x0110, 0x0110, 0x0112, 0x0112, 0x0114,
0x0114, 0x0116, 0x0116, 0x0118, 0x0118, 0x011A, 0x011A, 0x011C,
0x011C, 0x011E, 0x011E, 0x0120, 0x0120, 0x0122, 0x0122, 0x0124,
0x0124, 0x0126, 0x0126, 0x0128, 0x0128, 0x012A, 0x012A, 0x012C,
0x012C, 0x012E, 0x012E, 0x0130, 0x0049, 0x0132, 0x0132, 0x0134,
0x0134, 0x0136, 0x0136, 0x0138, 0x0139, 0x0139, 0x013B, 0x013B,
0x013D, 0x013D, 0x013F, 0x013F, 0x0141, 0x0141, 0x0143, 0x0143,
0x0145, 0x0145, 0x0147, 0x0147, 0x0149, 0x014A, 0x014A, 0x014C,
0x014C, 0x014E, 0x014E, 0x0150, 0x0150, 0x0152, 0x0152, 0x0154,
0x0154, 0x0156, 0x0156, 0x0158, 0x0158, 0x015A, 0x015A, 0x015C,
0x015C, 0x015E, 0x015E, 0x0160, 0x0160, 0x0162, 0x0162, 0x0164,
0x0164, 0x0166, 0x0166, 0x0168, 0x0168, 0x016A, 0x016A, 0x016C,
0x016C, 0x016E, 0x016E, 0x0170, 0x0170, 0x0172, 0x0172, 0x0174,
0x0174, 0x0176, 0x0176, 0x0178, 0x0179, 0x0179, 0x017B, 0x017B,
0x017D, 0x017D, 0x0053, 0x0243, 0x0181, 0x0182, 0x0182, 0x0184,
0x0184, 0x0186, 0x0187, 0x0187, 0x0189, 0x018A, 0x018B, 0x018B,
0x018D, 0x018E, 0x018F, 0x0190, 0x0191, 0x0191, 0x0193, 0x0194,
0x01F6, 0x0196, 0x0197, 0x0198, 0x0198, 0x023D, 0x019B, 0x019C,
0x019D, 0x0220, 0x019F, 0x01A0, 0x01A0, 0x01A2, 0x01A2, 0x01A4,
0x01A4, 0x01A6, 0x01A7, 0x01A7, 0x01A9, 0x01AA, 0x01AB, 0x01AC,
0x01AC, 0x01AE, 0x01AF, 0x01AF, 0x01B1, 0x01B2, 0x01B3, 0x01B3,
0x01B5, 0x01B5, 0x01B7, 0x01B8, 0x01B8, 0x01BA, 0x01BB, 0x01BC,
0x01BC, 0x01BE, 0x01F7, 0x01C0, 0x01C1, 0x01C2, 0x01C3, 0x01C4,
0x01C4, 0x01C4, 0x01C7, 0x01C7, 0x01C7, 0x01CA, 0x01CA, 0x01CA,
0x01CD, 0x01CD, 0x01CF, 0x01CF, 0x01D1, 0x01D1, 0x01D3, 0x01D3,
0x01D5, 0x01D5, 0x01D7, 0x01D7, 0x01D9, 0x01D9, 0x01DB, 0x01DB,
0x018E, 0x01DE, 0x01DE, 0x01E0, 0x01E0, 0x01E2, 0x01E2, 0x01E4,
0x01E4, 0x01E6, 0x01E6, 0x01E8, 0x01E8, 0x01EA, 0x01EA, 0x01EC,
0x01EC, 0x01EE, 0x01EE, 0x01F0, 0x01F1, 0x01F1, 0x01F1, 0x01F4,
0x01F4, 0x01F6, 0x01F7, 0x01F8, 0x01F8, 0x01FA, 0x01FA, 0x01FC,
0x01FC, 0x01FE, 0x01FE, 0x0200, 0x0200, 0x0202, 0x0202, 0x0204,
0x0204, 0x0206, 0x0206, 0x0208, 0x0208, 0x020A, 0x020A, 0x020C,
0x020C, 0x020E, 0x020E, 0x0210, 0x0210, 0x0212, 0x0212, 0x0214,
0x0214, 0x0216, 0x0216, 0x0218, 0x0218, 0x021A, 0x021A, 0x021C,
0x021C, 0x021E, 0x021E, 0x0220, 0x0221, 0x0222, 0x0222, 0x0224,
0x0224, 0x0226, 0x0226, 0x0228, 0x0228, 0x022A, 0x022A, 0x022C,
0x022C, 0x022E, 0x022E, 0x0230, 0x0230, 0x0232, 0x0232, 0x0234,
0x0235, 0x0236, 0x0237, 0x0238, 0x0239, 0x023A, 0x023B, 0x023B,
0x023D, 0x023E, 0x2C7E, 0x2C7F, 0x0241, 0x0241, 0x0243, 0x0244,
0x0245, 0x0246, 0x0246, 0x0248, 0x0248, 0x024A, 0x024A, 0x024C,
0x024C, 0x024E, 0x024E, 0x2C6F, 0x2C6D, 0x2C70, 0x0181, 0x0186,
0x0255, 0x0189, 0x018A, 0x0258, 0x018F, 0x025A, 0x0190, 0x025C,
0x025D, 0x025E, 0x025F, 0x0193, 0x0261, 0x0262, 0x0194, 0x0264,
0xA78D, 0xA7AA, 0x0267, 0x0197, 0x0196, 0x026A, 0x2C62, 0x026C,
0x026D, 0x026E, 0x019C, 0x0270, 0x2C6E, 0x019D, 0x0273, 0x0274,
0x019F, 0x0276, 0x0277, 0x0278, 0x0279, 0x027A, 0x027B, 0x027C,
0x2C64, 0x027E, 0x027F, 0x01A6, 0x0281, 0x0282, 0x01A9, 0x0284,
0x0285, 0x0286, 0x0287, 0x01AE, 0x0244, 0x01B1, 0x01B2, 0x0245,
0x028D, 0x028E, 0x028F, 0x0290, 0x0291, 0x01B7, 0x0293, 0x0294,
0x0295, 0x0296, 0x0297, 0x0298, 0x0299, 0x029A, 0x029B, 0x029C,
0x029D, 0x029E, 0x029F, 0x02A0, 0x02A1, 0x02A2, 0x02A3, 0x02A4,
0x02A5, 0x02A6, 0x02A7, 0x02A8, 0x02A9, 0x02AA, 0x02AB, 0x02AC,
0x02AD, 0x02AE, 0x02AF, 0x02B0, 0x02B1, 0x02B2, 0x02B3, 0x02B4,
0x02B5, 0x02B6, 0x02B7, 0x02B8, 0x02B9, 0x02BA, 0x02BB, 0x02BC,
0x02BD, 0x02BE, 0x02BF, 0x02C0, 0x02C1, 0x02C2, 0x02C3, 0x02C4,
0x02C5, 0x02C6, 0x02C7, 0x02C8, 0x02C9, 0x02CA, 0x02CB, 0x02CC,
0x02CD, 0x02CE, 0x02CF, 0x02D0, 0x02D1, 0x02D2, 0x02D3, 0x02D4,
0x02D5, 0x02D6, 0x02D7, 0x02D8, 0x02D9, 0x02DA, 0x02DB, 0x02DC,
0x02DD, 0x02DE, 0x02DF, 0x02E0, 0x02E1, 0x02E2, 0x02E3, 0x02E4,
0x02E5, 0x02E6, 0x02E7, 0x02E8, 0x02E9, 0x02EA, 0x02EB, 0x02EC,
0x02ED, 0x02EE, 0x02EF, 0x02F0, 0x02F1, 0x02F2, 0x02F3, 0x02F4,
0x02F5, 0x02F6, 0x02F7, 0x02F8, 0x02F9, 0x02FA, 0x02FB, 0x02FC,
0x02FD, 0x02FE, 0x02FF, 0x0300, 0x0301, 0x0302, 0x0303, 0x0304,
0x0305, 0x0306, 0x0307, 0x0308, 0x0309, 0x030A, 0x030B, 0x030C,
0x030D, 0x030E, 0x030F, 0x0310, 0x0311, 0x0312, 0x0313, 0x0314,
0x0315, 0x0316, 0x0317, 0x0318, 0x0319, 0x031A, 0x031B, 0x031C,
0x031D, 0x031E, 0x031F, 0x0320, 0x0321, 0x0322, 0x0323, 0x0324,
0x0325, 0x0326, 0x0327, 0x0328, 0x0329, 0x032A, 0x032B, 0x032C,
0x032D, 0x032E, 0x032F, 0x0330, 0x0331, 0x0332, 0x0333, 0x0334,
0x0335, 0x0336, 0x0337, 0x0338, 0x0339, 0x033A, 0x033B, 0x033C,
0x033D, 0x033E, 0x033F, 0x0340, 0x0341, 0x0342, 0x0343, 0x0344,
0x0399, 0x0346, 0x0347, 0x0348, 0x0349, 0x034A, 0x034B, 0x034C,
0x034D, 0x034E, 0x034F, 0x0350, 0x0351, 0x0352, 0x0353, 0x0354,
0x0355, 0x0356, 0x0357, 0x0358, 0x0359, 0x035A, 0x035B, 0x035C,
0x035D, 0x035E, 0x035F, 0x0360, 0x0361, 0x0362, 0x0363, 0x0364,
0x0365, 0x0366, 0x0367, 0x0368, 0x0369, 0x036A, 0x036B, 0x036C,
0x036D, 0x036E, 0x036F, 0x0370, 0x0370, 0x0372, 0x0372, 0x0374,
0x0375, 0x0376, 0x0376, 0x0378, 0x0379, 0x037A, 0x03FD, 0x03FE,
0x03FF, 0x037E, 0x037F, 0x0380, 0x0381, 0x0382, 0x0383, 0x0384,
0x0385, 0x0386, 0x0387, 0x0388, 0x0389, 0x038A, 0x038B, 0x038C,
0x038D, 0x038E, 0x038F, 0x0390, 0x0391, 0x0392, 0x0393, 0x0394,
0x0395, 0x0396, 0x0397, 0x0398, 0x0399, 0x039A, 0x039B, 0x039C,
0x039D, 0x039E, 0x039F, 0x03A0, 0x03A1, 0x03A2, 0x03A3, 0x03A4,
0x03A5, 0x03A6, 0x03A7, 0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x0386,
0x0388, 0x0389, 0x038A, 0x03B0, 0x0391, 0x0392, 0x0393, 0x0394,
0x0395, 0x0396, 0x0397, 0x0398, 0x0399, 0x039A, 0x039B, 0x039C,
0x039D, 0x039E, 0x039F, 0x03A0, 0x03A1, 0x03A3, 0x03A3, 0x03A4,
0x03A5, 0x03A6, 0x03A7, 0x03A8, 0x03A9, 0x03AA, 0x03AB, 0x038C,
0x038E, 0x038F, 0x03CF, 0x0392, 0x0398, 0x03D2, 0x03D3, 0x03D4,
0x03A6, 0x03A0, 0x03CF, 0x03D8, 0x03D8, 0x03DA, 0x03DA, 0x03DC,
0x03DC, 0x03DE, 0x03DE, 0x03E0, 0x03E0, 0x03E2, 0x03E2, 0x03E4,
0x03E4, 0x03E6, 0x03E6
} };

static const std::array<uint16_t, 161> kUpperCaseKeys = { {
0x0061, 0x00B5, 0x00E0, 0x00F8, 0x00FF, 0x0101, 0x0131, 0x0133,
0x013A, 0x014B, 0x017A, 0x017F, 0x0180, 0x0183, 0x0188, 0x018C,
0x0192, 0x0195, 0x0199, 0x019A, 0x019E, 0x01A1, 0x01A8, 0x01AD,
0x01B0, 0x01B4, 0x01B9, 0x01BD, 0x01BF, 0x01C5, 0x01C6, 0x01C8,
0x01C9, 0x01CB, 0x01CC, 0x01CE, 0x01DD, 0x01DF, 0x01F2, 0x01F3,
0x01F5, 0x01F9, 0x0223, 0x023C, 0x023F, 0x0242, 0x0247, 0x0250,
0x0251, 0x0252, 0x0253, 0x0254, 0x0256, 0x0259, 0x025B, 0x0260,
0x0263, 0x0265, 0x0266, 0x0268, 0x0269, 0x026B, 0x026F, 0x0271,
0x0272, 0x0275, 0x027D, 0x0280, 0x0283, 0x0288, 0x0289, 0x028A,
0x028C, 0x0292, 0x0345, 0x0371, 0x0377, 0x037B, 0x03AC, 0x03AD,
0x03B1, 0x03C2, 0x03C3, 0x03CC, 0x03CD, 0x03D0, 0x03D1, 0x03D5,
0x03D6, 0x03D7, 0x03D9, 0x03F0, 0x03F1, 0x03F2, 0x03F5, 0x03F8,
0x03FB, 0x0430, 0x0450, 0x0461, 0x048B, 0x04C2, 0x04CF, 0x04D1,
0x0561, 0x1D79, 0x1D7D, 0x1E01, 0x1E9B, 0x1EA1, 0x1F00, 0x1F10,
0x1F20, 0x1F30, 0x1F40, 0x1F51, 0x1F60, 0x1F70, 0x1F72, 0x1F76,
0x1F78, 0x1F7A, 0x1F7C, 0x1F80, 0x1F90, 0x1FA0, 0x1FB0, 0x1FB3,
0x1FBE, 0x1FC3, 0x1FD0, 0x1FE0, 0x1FE5, 0x1FF3, 0x214E, 0x2170,
0x2184, 0x24D0, 0x2C30, 0x2C61, 0x2C65, 0x2C66, 0x2C68, 0x2C73,
0x2C76, 0x2C81, 0x2CEC, 0x2CF3, 0x2D00, 0x2D27, 0x2D2D, 0xA641,
0xA681, 0xA723, 0xA733, 0xA77A, 0xA77F, 0xA78C, 0xA791, 0xA7A1,
0xFF41
} };

static const std::array<uint16_t, 322> kUpperCaseValues = { {
0x007A, 0xFFE0, 0x00B5, 0x02E7, 0x00F6, 0xFFE0, 0x00FE, 0xFFE0,
0x80FF, 0x0079, 0x812F, 0xFFFF, 0x8131, 0xFF18, 0x8137, 0xFFFF,
0x8148, 0xFFFF, 0x8177, 0xFFFF, 0x817E, 0xFFFF, 0x017F, 0xFED4,
0x0180, 0x00C3, 0x8185, 0xFFFF, 0x0188, 0xFFFF, 0x018C, 0xFFFF,
0x0192, 0xFFFF, 0x0195, 0x0061, 0x0199, 0xFFFF, 0x019A, 0x00A3,
0x019E, 0x0082, 0x81A5, 0xFFFF, 0x01A8, 0xFFFF, 0x01AD, 0xFFFF,
0x01B0, 0xFFFF, 0x81B6, 0xFFFF, 0x01B9, 0xFFFF, 0x81BD, 0xFFFF,
0x01BF, 0x0038, 0x01C5, 0xFFFF, 0x81C6, 0xFFFE, 0x01C8, 0xFFFF,
0x81C9, 0xFFFE, 0x01CB, 0xFFFF, 0x81CC, 0xFFFE, 0x81DC, 0xFFFF,
0x81DD, 0xFFB1, 0x81EF, 0xFFFF, 0x01F2, 0xFFFF, 0x81F3, 0xFFFE,
0x01F5, 0xFFFF, 0x821F, 0xFFFF, 0x8233, 0xFFFF, 0x023C, 0xFFFF,
0x0240, 0x2A3F, 0x0242, 0xFFFF, 0x824F, 0xFFFF, 0x0250, 0x2A1F,
0x0251, 0x2A1C, 0x0252, 0x2A1E, 0x0253, 0xFF2E, 0x8254, 0xFF32,
0x0257, 0xFF33, 0x8259, 0xFF36, 0x025B, 0xFF35, 0x0260, 0xFF33,
0x8263, 0xFF31, 0x0265, 0xA528, 0x8266, 0xA544, 0x0268, 0xFF2F,
0x8269, 0xFF2D, 0x026B, 0x29F7, 0x826F, 0xFF2D, 0x0271, 0x29FD,
0x0272, 0xFF2B, 0x0275, 0xFF2A, 0x027D, 0x29E7, 0x0280, 0xFF26,
0x0283, 0xFF26, 0x0288, 0xFF26, 0x0289, 0xFFBB, 0x028B, 0xFF27,
0x028C, 0xFFB9, 0x0292, 0xFF25, 0x0345, 0x0054, 0x8373, 0xFFFF,
0x0377, 0xFFFF, 0x037D, 0x0082, 0x03AC, 0xFFDA, 0x03AF, 0xFFDB,
0x03C1, 0xFFE0, 0x03C2, 0xFFE1, 0x03CB, 0xFFE0, 0x03CC, 0xFFC0,
0x03CE, 0xFFC1, 0x03D0, 0xFFC2, 0x03D1, 0xFFC7, 0x03D5, 0xFFD1,
0x03D6, 0xFFCA, 0x83D7, 0xFFF8, 0x83EF, 0xFFFF, 0x03F0, 0xFFAA,
0x03F1, 0xFFB0, 0x03F2, 0x0007, 0x03F5, 0xFFA0, 0x03F8, 0xFFFF,
0x03FB, 0xFFFF, 0x044F, 0xFFE0, 0x045F, 0xFFB0, 0x8481, 0xFFFF,
0x84BF, 0xFFFF, 0x84CE, 0xFFFF, 0x84CF, 0xFFF1, 0x8527, 0xFFFF,
0x0586, 0xFFD0, 0x1D79, 0x8A04, 0x1D7D, 0x0EE6, 0x9E95, 0xFFFF,
0x1E9B, 0xFFC5, 0x9EFF, 0xFFFF, 0x1F07, 0x0008, 0x1F15, 0x0008,
0x1F27, 0x0008, 0x1F37, 0x0008, 0x1F45, 0x0008, 0x9F57, 0x0008,
0x1F67, 0x0008, 0x1F71, 0x004A, 0x1F75, 0x0056, 0x1F77, 0x0064,
0x1F79, 0x0080, 0x1F7B, 0x0070, 0x1F7D, 0x007E, 0x1F87, 0x0008,
0x1F97, 0x0008, 0x1FA7, 0x0008, 0x1FB1, 0x0008, 0x1FB3, 0x0009,
0x1FBE, 0xE3DB, 0x1FC3, 0x0009, 0x1FD1, 0x0008, 0x1FE1, 0x0008,
0x1FE5, 0x0007, 0x1FF3, 0x0009, 0x214E, 0xFFE4, 0x217F, 0xFFF0,
0x2184, 0xFFFF, 0x24E9, 0xFFE6, 0x2C5E, 0xFFD0, 0x2C61, 0xFFFF,
0x2C65, 0xD5D5, 0xAC66, 0xD5D8, 0xAC6C, 0xFFFF, 0x2C73, 0xFFFF,
0x2C76, 0xFFFF, 0xACE3, 0xFFFF, 0xACEE, 0xFFFF, 0x2CF3, 0xFFFF,
0x2D25, 0xE3A0, 0x2D27, 0xE3A0, 0x2D2D, 0xE3A0, 0x266D, 0xFFFF,
0x2697, 0xFFFF, 0x272F, 0xFFFF, 0x276F, 0xFFFF, 0x277C, 0xFFFF,
0x2787, 0xFFFF, 0xA78C, 0xFFFF, 0x2793, 0xFFFF, 0x27A9, 0xFFFF,
0xFF5A, 0xFFE0
} };

inline Category GetCategory(uint16_t c) {
  if (c < 1000) {
    return static_cast<Category>(kCategoryCache[c]);
  }
  const int result =
      static_cast<int>(std::upper_bound(
              kCategoryKeys.begin(),
              kCategoryKeys.end(), c) - kCategoryKeys.begin() - 1);
  assert(result < static_cast<int>(kCategoryKeys.size()));
  const int high = kCategoryValues[result * 2];
  if (c <= high) {
    const int code = kCategoryValues[result * 2 + 1];
    if (code < 0x100) {
      return static_cast<Category>(code);
    }
    return static_cast<Category>((c & 1) ? code >> 8 : code & 0xff);
  }
  return UNASSIGNED;
}

inline bool IsASCII(uint16_t c) {
  return !(c & ~0x7F);
}

inline bool IsASCIIAlpha(uint16_t c) {
  return (c | 0x20) >= 'a' && (c | 0x20) <= 'z';
}

inline bool IsDecimalDigit(uint16_t c) {
  return c >= '0' && c <= '9';
}

inline bool IsOctalDigit(uint16_t c) {
  return c >= '0' && c <= '7';
}

inline bool IsHexDigit(uint16_t c) {
  return IsDecimalDigit(c) || ((c | 0x20) >= 'a' && (c | 0x20) <= 'f');
}

inline bool IsDigit(uint16_t c) {
  return IsDecimalDigit(c) ||
      (c > 1631 && GetCategory(c) == DECIMAL_DIGIT_NUMBER);
}

inline bool IsASCIIAlphanumeric(uint16_t c) {
  return IsDecimalDigit(c) || IsASCIIAlpha(c);
}

inline bool IsNonASCIIIdentifierStart(uint16_t c) {
  return (1 << GetCategory(c)) & (Lu | Ll | Lt | Lm | Lo | Nl);
}

inline bool IsNonASCIIIdentifierPart(uint16_t c) {
  return
      ((1 << GetCategory(c)) &
       (Lu | Ll | Lt | Lm | Lo | Mn | Mc | Nd | Pc | Nl)) ||
      c == code::ZWNJ || c == code::ZWJ;
}

inline bool IsSeparatorSpace(uint16_t c) {
  return GetCategory(c) == SPACE_SEPARATOR;
}

inline bool IsWhiteSpace(uint16_t c) {
  return IsASCII(c) ?
      (c == ' ' || c == '\t' || c == 0xB || c == 0xC) :
      c == 0x00A0 || c == 0xFEFF || IsSeparatorSpace(c);
}

inline bool IsLineTerminator(uint16_t c) {
  return
      c == code::CR ||
      c == code::LF ||
      (c & ~1) == 0x2028;  // 0x2028 or 0x2029
}

inline bool IsLineOrParagraphSeparator(uint16_t c) {
  return (c & ~1) == 0x2028;  // 0x2028 or 0x2029
}

inline bool IsIdentifierStart(uint16_t c) {
  return IsASCII(c) ? c == '$'  || c == '_' ||
                      c == '\\' || IsASCIIAlpha(c) :
                      IsNonASCIIIdentifierStart(c);
}

inline bool IsIdentifierPart(uint16_t c) {
  return IsASCII(c) ? c == '$'  || c == '_' ||
                      c == '\\' || IsASCIIAlphanumeric(c) :
                      IsNonASCIIIdentifierPart(c);
}

inline uint16_t ToLowerCase(uint16_t c) {
  if ('A' <= c && c <= 'Z') {
    return c + ('a' - 'A');
  }
  // lowercase not found until 0xC0
  if (c < 0xC0) {
    return c;
  }
  // suppress compiler warnings
  {
    const std::size_t index = c - 0xC0;
    if (index < kLowerCaseCache.size()) {
      assert(index < kLowerCaseCache.size());
      return kLowerCaseCache[index];
    }
  }
  std::array<uint16_t, 101>::const_iterator it =
      std::upper_bound(kLowerCaseKeys.begin(),
                       kLowerCaseKeys.end(), c) - 1;
  const int result = static_cast<int>(it - kLowerCaseKeys.begin());
  assert(result < 101);
  if (result >= 0) {
    bool by2 = false;
    const uint16_t start = kLowerCaseKeys[result];
    uint16_t end = kLowerCaseValues[result * 2];
    if ((start & 0x8000) != (end & 0x8000)) {
        end ^= 0x8000;
        by2 = true;
    }
    if (c <= end) {
      if (by2 && (c & 1) != (start & 1)) {
        return c;
      }
      const uint16_t mapping = kLowerCaseValues[result * 2 + 1];
      return c + mapping;
    }
  }
  return c;
}

inline uint16_t ToUpperCase(uint16_t c) {
  if ('a' <= c && c <= 'z') {
    return c - ('a' - 'A');
  }
  // uppercase not found until 0xB5
  if (c < 0xB5) {
    return c;
  }

  // suppress compiler warnings
  {
    const std::size_t index = c - 0xB5;
    if (index < kUpperCaseCache.size()) {
      assert(index < kUpperCaseCache.size());
      return kUpperCaseCache[index];
    }
  }
  std::array<uint16_t, 113>::const_iterator it =
      std::upper_bound(kUpperCaseKeys.begin(),
                       kUpperCaseKeys.end(), c) - 1;
  const int result = static_cast<int>(it - kUpperCaseKeys.begin());
  assert(result < 113);
  if (result >= 0) {
    bool by2 = false;
    const uint16_t start = *it;
    uint16_t end = kUpperCaseValues[result * 2];
    if ((start & 0x8000) != (end & 0x8000)) {
      end ^= 0x8000;
      by2 = true;
    }
    if (c <= end) {
      if (by2 && (c & 1) != (start & 1)) {
        return c;
      }
      const uint16_t mapping = kUpperCaseValues[result * 2 + 1];
      return c + mapping;
    }
  }
  return c;
}

struct ContainsNonASCIICharacter {
  template<typename CharT>
  bool operator()(CharT ch) const {
    return !IsASCII(ch);
  }
};

template<typename Iter>
inline bool IsASCII(Iter it, Iter last) {
  return std::find_if(it, last, ContainsNonASCIICharacter()) == last;
}

}  // namespace iv::core::character
} }  // namespace iv::core
#endif  // IV_CHARACTER_H_
