// This file is auto-generated header by tools/generate-subtag.py.
// So do not edit this file.
#ifndef IV_I18N_LANGUAGE_TAG_H_
#define IV_I18N_LANGUAGE_TAG_H_
#include <iv/detail/unordered_map.h>
#include <iv/detail/array.h>
#include <iv/stringpiece.h>
namespace iv {
namespace core {
namespace i18n {
namespace i18n_detail {
}  // namespace i18n_detail

// Irregular / regular grandfathered language tags and Preferred-Value
// Following tags don't provide Preferred-Value in registry.
// So we define fallback tags by executing ICU canonicalizations.
//     cel-graulish cel-graulis
//     en-GB-oed    en-GB-x-oed
//     i-default    en-x-i-default
//     i-enochian   x-i-enochian
//     i-mingo      see-x-i-mingo
//     zh-min       nan-x-zh-min
typedef std::array<std::pair<StringPiece, StringPiece>, 26> GrandfatheredArray;
static const GrandfatheredArray kGrandfathered = { {
  std::make_pair("cel-graulish", "cel-graulis"),
  std::make_pair("en-GB-oed", "en-GB-x-oed"),
  std::make_pair("i-default", "en-x-i-default"),
  std::make_pair("i-enochian", "x-i-enochian"),
  std::make_pair("i-mingo", "see-x-i-mingo"),
  std::make_pair("zh-min", "nan-x-zh-min"),
  std::make_pair("art-lojban", "jbo"),
  std::make_pair("i-ami", "ami"),
  std::make_pair("i-bnn", "bnn"),
  std::make_pair("i-hak", "hak"),
  std::make_pair("i-klingon", "tlh"),
  std::make_pair("i-lux", "lb"),
  std::make_pair("i-navajo", "nv"),
  std::make_pair("i-pwn", "pwn"),
  std::make_pair("i-tao", "tao"),
  std::make_pair("i-tay", "tay"),
  std::make_pair("i-tsu", "tsu"),
  std::make_pair("no-bok", "nb"),
  std::make_pair("no-nyn", "nn"),
  std::make_pair("sgn-BE-FR", "sfb"),
  std::make_pair("sgn-BE-NL", "vgt"),
  std::make_pair("sgn-CH-DE", "sgg"),
  std::make_pair("zh-guoyu", "cmn"),
  std::make_pair("zh-hakka", "hak"),
  std::make_pair("zh-min-nan", "nan"),
  std::make_pair("zh-xiang", "hsn")
} };

typedef std::unordered_map<std::string, std::string> TagMap;

inline const TagMap& Grandfathered() {
  static const TagMap map(kGrandfathered.begin(), kGrandfathered.end());
  return map;
}

} } }  // namespace iv::core::i18n
#endif  // IV_I18N_LANGUAGE_TAG_H_
