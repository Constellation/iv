// This file is auto-generated header by tools/generate-subtag.py.
// So do not edit this file.
#ifndef IV_I18N_LANGUAGE_TAG_H_
#define IV_I18N_LANGUAGE_TAG_H_
#include <iv/detail/unordered_map.h>
#include <iv/detail/array.h>
#include <iv/stringpiece.h>
namespace iv {
namespace core {
namespace i18n {
namespace i18n_detail {
}  // namespace i18n_detail

// Irregular / regular grandfathered language tags and Preferred-Value.
// Following tags don't provide Preferred-Value in registry.
// So we define fallback tags by executing ICU canonicalizations.
//     cel-graulish cel-graulis
//     en-GB-oed    en-GB-x-oed
//     i-default    en-x-i-default
//     i-enochian   x-i-enochian
//     i-mingo      see-x-i-mingo
//     zh-min       nan-x-zh-min
typedef std::array<std::pair<StringPiece, StringPiece>, 26> GrandfatheredArray;
static const GrandfatheredArray kGrandfathered = { {
  std::make_pair("cel-graulish", "cel-graulis"),
  std::make_pair("en-gb-oed", "en-GB-x-oed"),
  std::make_pair("i-default", "en-x-i-default"),
  std::make_pair("i-enochian", "x-i-enochian"),
  std::make_pair("i-mingo", "see-x-i-mingo"),
  std::make_pair("zh-min", "nan-x-zh-min"),
  std::make_pair("art-lojban", "jbo"),
  std::make_pair("i-ami", "ami"),
  std::make_pair("i-bnn", "bnn"),
  std::make_pair("i-hak", "hak"),
  std::make_pair("i-klingon", "tlh"),
  std::make_pair("i-lux", "lb"),
  std::make_pair("i-navajo", "nv"),
  std::make_pair("i-pwn", "pwn"),
  std::make_pair("i-tao", "tao"),
  std::make_pair("i-tay", "tay"),
  std::make_pair("i-tsu", "tsu"),
  std::make_pair("no-bok", "nb"),
  std::make_pair("no-nyn", "nn"),
  std::make_pair("sgn-be-fr", "sfb"),
  std::make_pair("sgn-be-nl", "vgt"),
  std::make_pair("sgn-ch-de", "sgg"),
  std::make_pair("zh-guoyu", "cmn"),
  std::make_pair("zh-hakka", "hak"),
  std::make_pair("zh-min-nan", "nan"),
  std::make_pair("zh-xiang", "hsn")
} };

// Redundant tags are replaced to Preferred-Value.
// If tag don't provide Preferred-Value, we don't replace it.
typedef std::array<std::pair<StringPiece, StringPiece>, 25> RedundantArray;
static const RedundantArray kRedundant = { {
  std::make_pair("sgn-br", "bzs"),
  std::make_pair("sgn-co", "csn"),
  std::make_pair("sgn-de", "gsg"),
  std::make_pair("sgn-dk", "dsl"),
  std::make_pair("sgn-es", "ssp"),
  std::make_pair("sgn-fr", "fsl"),
  std::make_pair("sgn-gb", "bfi"),
  std::make_pair("sgn-gr", "gss"),
  std::make_pair("sgn-ie", "isg"),
  std::make_pair("sgn-it", "ise"),
  std::make_pair("sgn-jp", "jsl"),
  std::make_pair("sgn-mx", "mfs"),
  std::make_pair("sgn-ni", "ncs"),
  std::make_pair("sgn-nl", "dse"),
  std::make_pair("sgn-no", "nsl"),
  std::make_pair("sgn-pt", "psr"),
  std::make_pair("sgn-se", "swl"),
  std::make_pair("sgn-us", "ase"),
  std::make_pair("sgn-za", "sfs"),
  std::make_pair("zh-cmn", "cmn"),
  std::make_pair("zh-cmn-hans", "cmn-Hans"),
  std::make_pair("zh-cmn-hant", "cmn-Hant"),
  std::make_pair("zh-gan", "gan"),
  std::make_pair("zh-wuu", "wuu"),
  std::make_pair("zh-yue", "yue")
} };

// Language tags with Preferred-Value.
typedef std::array<std::pair<StringPiece, StringPiece>, 16> LanguageArray;
static const LanguageArray kLanguage = { {
  std::make_pair("in", "id"),
  std::make_pair("iw", "he"),
  std::make_pair("ji", "yi"),
  std::make_pair("jw", "jv"),
  std::make_pair("mo", "ro"),
  std::make_pair("ayx", "nun"),
  std::make_pair("cjr", "mom"),
  std::make_pair("cmk", "xch"),
  std::make_pair("drh", "khk"),
  std::make_pair("drw", "prs"),
  std::make_pair("gav", "dev"),
  std::make_pair("mst", "mry"),
  std::make_pair("myt", "mry"),
  std::make_pair("tie", "ras"),
  std::make_pair("tkk", "twm"),
  std::make_pair("tnf", "prs")
} };

// Region tags with Preferred-Value.
typedef std::array<std::pair<StringPiece, StringPiece>, 6> RegionArray;
static const RegionArray kRegion = { {
  std::make_pair("BU", "MM"),
  std::make_pair("DD", "DE"),
  std::make_pair("FX", "FR"),
  std::make_pair("TP", "TL"),
  std::make_pair("YD", "YE"),
  std::make_pair("ZR", "CD")
} };

// Variant tags with Preferred-Value.
typedef std::array<std::pair<StringPiece, StringPiece>, 1> VariantArray;
static const VariantArray kVariant = { {
  std::make_pair("heploc", "alalc97")
} };

typedef std::unordered_map<std::string, std::string> TagMap;

inline const TagMap& Grandfathered() {
  static const TagMap map(kGrandfathered.begin(), kGrandfathered.end());
  return map;
}

inline const TagMap& Redundant() {
  static const TagMap map(kRedundant.begin(), kRedundant.end());
  return map;
}

inline const TagMap& Language() {
  static const TagMap map(kLanguage.begin(), kLanguage.end());
  return map;
}

inline const TagMap& Region() {
  static const TagMap map(kRegion.begin(), kRegion.end());
  return map;
}

inline const TagMap& Variant() {
  static const TagMap map(kVariant.begin(), kVariant.end());
  return map;
}

} } }  // namespace iv::core::i18n
#endif  // IV_I18N_LANGUAGE_TAG_H_
